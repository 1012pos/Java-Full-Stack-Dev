20240612
1. Help -> web developer -> Java and Web Developer Tools 3.33 다운 받기(이미지 있음)
2. resp.getWriter().append(html); 여기서 append의 의미 공부하기
3. C:\IDE\sts-4.22.1.RELEASE\work
: github에서 받은 자료에 대한 경로 -> 마지막은 프로젝트 -> 우측키 -> import project 해야함
4. webapp가 루트임
5. java가 jsp(ex, index.jsp 파일)를 만나면 알아서 해결해줌 어제처럼 할필요 없음(Result.java, html을 다 작성할 필요 없다.)처럼
6. http://localhost:8080/web/index.jsp -> 브라우저에서 안녕하세요 나옴
7. final은 상수
8. 오버라이드 해서 -> service
9. service를 호출하면 어떤것이든 열린다.
10. 내일 시험 DB와 연결하려면 pom.xml 파일에서 <dependencies>, <dependency> 이부분들 복사하기
+ mybatis.xml 파일 필요(WeServlet에 있음), web.xml복사해서 넣으면 됨(<display-name>WebServlet</display-name>) 이부분을 수정하면됨
11. xml 파일이 이상하게 나오면 Source탭 누르면 됨
==========================================================
12. 내일 시험
12-1. Maven Project로 프로젝트 생성시 Create a simple project 체크 꼭 해야 하고, war을 설정하는 이유는 웹(web)용이기 때문에 war로 설정한다.
그리고 Artifact Id 와 Name 아이디는 동일해야 한다. 또한, Group Id 는 java.com를 뒤집어서 작성하신 것임 com.java로 설정했음
그리고 패키지명 꼭 com.java.app으로 작성해야한다.

12-2. WEB-INF, META-INF 필요하기 때문에 -> 프로젝트 -> 우측키 -> Properties -> Project Facets -> Dynamic Web Module 을 체크 풀고
-> Apply 누르면 WEB-INF, META-INF 생성됨 -> 다시 Dynamic Web Module 체크 및 Version 4.0으로 설정 후 Apply

12-3. 자바 버전 수정필요
: 프로젝트 클릭 후 -> 우측키 -> Build Path -> Configure Build Path -> JRE System Library 클릭 후 -> Edit -> java-21로 설정
: Add Library -> Server Runtime -> Apache Tomcat v9.0 설정

12-4. src/main/java -> 클래스 파일 생성(com.java.app) + httpServlet 추가 후 -> @WebServlet("/home")
그다음 Source -> Override -> Service 검색

12-5. 기존 프로젝트 -> webapp -> WEB-INF -> web.xml을 복사 붙여 넣기(ctrl + space) / 만약 @WebServlet("/home") 하기 싫으면 web.xml에 아래의 코드 처럼 직접 기입 방법도 있음 (택 1)

<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" id="WebApp_ID" version="4.0">
  <display-name>app</display-name>
 
 <servlet>
 	<servlet-name>Home</servlet-name>	<!-- 클래스명 기입  -->
 	<servlet-class>com.java.app.Home</servlet-class> <!-- 패키지명까지 넣어줘야 손모양 나옴 -->
 </servlet>
 
 <servlet-mapping>
	<servlet-name>Home</servlet-name> <!-- 클래스명 기입  -->
	<url-pattern>/home</url-pattern> <!-- url 기입  -->
 </servlet-mapping>
  
</web-app>
==========================================================

12-6. Server탭에서 -> Tomcat v9.0 -> Add and Remove -> 서버 추가하면 됨

12-7. http://localhost:8080/app/home로 브라우저에서 검색


13. 경로 수정 방법은 프로젝트 -> Properties -> Web Project Settiongs -> Context root 여기를 원하는 경로로 설정하면 됨

14. 시험 내용(간단하게 작성 필요 포트폴리오)
1. 개발환경 구축
1-1 자바 관련 내용(환경변수 설정)
1-2 통합 개발 툴 관련 내용(메모장에서도 개발 가능)
1-3 웹 서비스 관련 내용(웹 어플리케이션 서버 - 톰캣 필요)
1-4 프로젝트 관련 내용
1-5 데이터 저장소 관련 내용(마리아DB, Mybatis)


2. URL 패턴에 대한 정의
2-1 URL / URI 관련 내용 (URI 물리적인 파일 읽을때(확장자 명까지?), URL 내용 작성해야함)
2-2 서블렛 관련 내용(어노테이션관련 내용 , XML 관련 내용)


3. 데이터 전송 관련 문제 해결
3-1 요청과 응답에서 발생하는 한글 깨짐 관련 내용(UTF-8 언제 적용하고 어디다가 작성하는지 등)
3-2 데이터 저장소에서 발생하는 한글 깨짐 관련 내용

4. 프로그램 흐름 및 실행 화면
4-1 프로그램 흐름
4-2 적용 사례(강사님이 주신 자료를 가지고 만든다음 화면 캡쳐 후 넣으면 됨)


package com.java.app;

import java.io.IOException;

import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
//import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

//@WebServlet("/home")
public class Home extends HttpServlet {

	@Override
	protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		System.out.println("Home!!");
	}

	
}

<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" id="WebApp_ID" version="4.0">
  <display-name>app</display-name>
 
 <servlet>
 	<servlet-name>Home</servlet-name>	<!-- 클래스명 기입  -->
 	<servlet-class>com.java.app.Home</servlet-class> <!-- 패키지명까지 넣어줘야 손모양 나옴 -->
 </servlet>
 
 <servlet-mapping>
	<servlet-name>Home</servlet-name> <!-- 클래스명 기입  -->
	<url-pattern>/home</url-pattern> <!-- url 기입  -->
 </servlet-mapping>
  
</web-app>





