20240828
1. VSCODE는 프론트 코드
2. Spring은 백엔드 코드
3. 아래의 코드 스프링 시큐리티 포트폴리오에 넣기 
-- root 사용자로 접속 후 실행
USE mysql;

CREATE DATABASE company;

GRANT ALL ON company.* TO 'test'@'localhost';

FLUSH PRIVILEGES;

SHOW GRANTS FOR 'test'@'localhost';

-- test 사용자로 접속 후 실행
USE company;

CREATE TABLE `user` (
	userNo 			INT 				NOT NULL AUTO_INCREMENT PRIMARY KEY,
	userNm 			VARCHAR(50) 	NOT NULL,
	userPwd			VARCHAR(100)		NOT NULL,
	userEnable		BOOLEAN			NOT NULL DEFAULT 1
);

CREATE TABLE `role` (
	roleNo		INT				NOT NULL AUTO_INCREMENT PRIMARY KEY,
	roleNm		VARCHAR(50) 	NOT NULL
);

CREATE TABLE `user_role` (
	`userNo` INT	NULL DEFAULT NULL,
	`roleNo` INT	NULL DEFAULT NULL
);

-- 비밀번호 : 1234
INSERT INTO `user` (userNm, userPwd) VALUES ('관리자','$2a$10$wQjWW.RDnC/8fQ5X2hYbl.1B2yZeQEE0nreiL5keMpuPtIQW.s0PS');
INSERT INTO `user` (userNm, userPwd) VALUES ('사용자','$2a$10$wQjWW.RDnC/8fQ5X2hYbl.1B2yZeQEE0nreiL5keMpuPtIQW.s0PS');

INSERT INTO `role` (roleNm) VALUES ('ADMIN');
INSERT INTO `role` (roleNm) VALUES ('DEVELOPER');
INSERT INTO `role` (roleNm) VALUES ('USER');

INSERT INTO `user_role` VALUES (1,1);
INSERT INTO `user_role` VALUES (1,2);
INSERT INTO `user_role` VALUES (1,3);
INSERT INTO `user_role` VALUES (2,3);

COMMIT;


4. @Override
	public Collection<? extends GrantedAuthority> getAuthorities() {
		Set<GrantedAuthority> grant = new HashSet<>();
		roles.forEach(role -> grant.add(new SimpleGrantedAuthority("ROLE_".concat(role.getRoleNm()))));
		return grant;
	}
: 시큐리티를 사용하면 시큐리티 특성상	 "ROLE_".concat(role.getRoleNm() 이렇게 앞에 "ROLE_".concat를 붙여야 한다.

5. @Bean
	public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
		// 스프링 필터 비활성화
		http.csrf(AbstractHttpConfigurer::disable);
		http.formLogin(AbstractHttpConfigurer::disable);
		http.logout(AbstractHttpConfigurer::disable);
		http.httpBasic(AbstractHttpConfigurer::disable);
//		http.cors(AbstractHttpConfigurer::disable);
		// 해당 IP 또는 DNS 접속 허용 추가
		http.cors(cors -> cors.configurationSource(req -> corsOrigin()));
		// 스프링쪽 자동 생성 되는 session 비활성화
		http.sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS));
		// JWT 토큰 확인를 위한 필터 추가
		http.addFilterBefore(jwtFilter, UsernamePasswordAuthenticationFilter.class);
		// 접근 URL 정의 (권한 설정)
		http.authorizeHttpRequests(req -> {
			req.requestMatchers("/**").permitAll(); // 해당 URL 접근 허용
//			req.anyRequest().authenticated(); // 나머지 URL 접근 막기
		});
		return http.build();
	}
	
: http.csrf(AbstractHttpConfigurer::disable); 
  http.formLogin(AbstractHttpConfigurer::disable);
  http.logout(AbstractHttpConfigurer::disable);
  http.httpBasic(AbstractHttpConfigurer::disable);
위의 코드 하나씩 이해하기 어떤 역할을 하는지

6. http.cors(cors -> cors.configurationSource(req -> corsOrigin()));
	private CorsConfiguration corsOrigin() {
		CorsConfiguration corsConfig = new CorsConfiguration();
        corsConfig.setAllowedOrigins(Arrays.asList("http://127.0.0.1:5500", "http://localhost:5500")); // 허용할 도메인
        corsConfig.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "DELETE", "PATCH")); // 허용할 메서드
        corsConfig.setAllowedHeaders(Arrays.asList("*")); // 허용할 헤더
        corsConfig.setAllowCredentials(true); // 자격 증명 허용
        return corsConfig;
	} 
: 위의 코드를 작성하면 컨트롤에서 //@CrossOrigin(origins = {"http://127.0.0.1:5500", "http://localhost:5500"}) 를 작성할 필요가 없다.

