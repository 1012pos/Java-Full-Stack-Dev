20240821
1. 애플리케이션 설계 시험은 시큐리티 만들기

2. 네트워크 프로그래밍 구현(소켓) 시험은 문제 풀기

3. 프론트랑 대화하기 위한 아키텍처가 JWT다

4. 어제는 토큰을 생성하는것을 배우고, 오늘은 토큰을 해제하는것을 배울것이다.

5. BASE64
: https://www.base64decode.org/

6. 토큰은 생성할때 마다 새로 생성된다.

7. ENCODE
: 암호화

8. DECODE
: 복호화

9. access.auth.interval=1
: 토큰 유지시간

10. 토근을 먼저 생성하고 -> 생생된 토큰을 URL 넣으면 된다.
// 토큰을 던져주면, 값을 가지고 올수 있다.
	// http://localhost/token/생성한 토큰을 기입하며 된다.
	
	@GetMapping("/token/{token}")
	public Claims token(@PathVariable("token") String jwt) {
		if(token.isValidToken(jwt)) {
			return token.getToken(jwt);
		}
		return null;
	}
	
	
11. Open API를 사용하려면 식별할 수 있는 토큰을 사용해야 한다.
	
12. RSA
: 공유키(PUBLIC KEY) , 개인키(PRIVATE KEY)

13. TOKEN
: 토큰에 사용자 정보가 담겨 있다.

14. 로그인 했을때 TOKEN이 생성되면 된다.

15. 스프링 시큐리티 사용하려면 아래의 디펜디시 추가
: implementation "org.springframework.boot:spring-boot-starter-security"
: https://docs.spring.io/spring-security/reference/getting-spring-security.html


16. 시큐리티를 사용하면 필터로 인해서 로그인부터 시작하게 된다.

17. html파일에서 아래의 코드를 사용하려면 <html xmlns:th="http://www.thymeleaf.org" xmlns:sec="http://www.thymeleaf.org/extras/spring-security"> 를 추가해야 한다.
<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org" xmlns:sec="http://www.thymeleaf.org/extras/spring-security">
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
	<h1 sec:authentication="name">이름</h1>
	<h2 sec:authentication="principal.authorities">권한</h2>

</body>
</html>


18. html파일에서 아래의 코드를 사용하려면 build.gradle에 implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6:3.1.1.RELEASE' 를 추가해야 한다.



