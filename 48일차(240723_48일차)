20240723
1. spring application.properties 검색후 링크 들어가기 -> Data Properties
: https://docs.spring.io/spring-boot/appendix/application-properties/index.html
: https://docs.spring.io/spring-boot/appendix/application-properties/index.html#appendix.application-properties.data

2. 위의 링크에서 아래의 키워드 검색할 줄 알아야 함(설정코드 관련)
- spring.datasource.driver-class-name
- spring.datasource.url=jdbc:mariadb
- spring.datasource.username
- spring.datasource.password

3. application.properties에 아래의 설정코드 작성해야함
spring.application.name=BootTest
server.port=80

spring.datasource.driver-class-name=org.mariadb.jdbc.Driver
spring.datasource.url=jdbc:mariadb://localhost:3306/edu
spring.datasource.username=root
spring.datasource.password=1234

4. 배포할때 application.properties 설정 파일이 중요하다.

5. application.yml
: 아래와 같이 트리구조로 코드를 작성해야 한다.
	spring:
	  application:
		name: BootTest
	  datasource:
		driver-class-name: org.mariadb.jdbc.Driver
		url: jdbc:mariadb://localhost:3306/edu
		username: root
		password: 1234
		
	server:
	  port: 80
	  
6. 설정파일이 2개가 있을수 있지만 하나만 사용해야 하므로, 주석처리를 해야 하고, 배포하려고
application.yml 설정파일을 사용할 것이다.

7. 배포하려면 아래의 코드가 필요
   profiles:
    active:
    - dev
	
8. ---
: 경계라인

9. application.yml
: 운영쪽과 개발쪽을 구분지어서 설정코드를 작성(아래의 코드를 작성해도 아래의 오류 코드 뜸 설정을 더해야함)
- Failed to configure a DataSource: 'url' attribute is not specified and no embedded datasource could be configured.

server:
  port: 80
  
spring:
  application:
    name: BootTest
  profiles:
    group:
      dev:
      - commons
      - dev_profile
      prod:
      - commons
      - prod_profile

---

spring:
  config:
    activate:
      on-profile: commons
  datasource:
    driver-class-name: org.mariadb.jdbc.Driver
    username: root
    
---

spring:
  config:
    activate:
      on-profile: dev_profile
  datasource:
    url: jdbc:mariadb://localhost:3306/edu
    password: 1234
    
---
 
spring:
  config:
    activate:
      on-profile: prod_profile
  datasource:
    url: jdbc:mariadb://localhost:23306/edu
    password: 4321
	
9-1 [프로젝트 우클릭 -> Run AS -> Run Configurations -> Environment -> Add]

10. 서버 끄고 cmd 창에서 아래의 코드 작성
 cd C:\IDE\sts-4.22.1.RELEASE\work\BootTest
 
10.1 cmd창에서 dir 작성
 
11. cmd창에서 gradlew bootRun -> 오류가 나야 정상이다.

12. gradle -version
: gradle이 설치되어 있는지 확인하기
: 자바버전 안맞으면 build.gradle에서 수정하면 된다.

13. cmd창에서 gradlew bootRun --args='--spring.profiles.active=test1'

14. cmd창에서 gradlew bootJar 명령어 검색
: 배포(프로젝트-버전.jar)

15. C:\IDE\sts-4.22.1.RELEASE\work\BootTest\build\libs
: BootTest-1.jar 확인


16. cmd창에서 아래의 순서대로 명령어 검색(배포할때 검색어)
1. cd build
2. cd libs
3. dir
4. java -jar -Dspring.profiles.active=test1 BootTest-1.jar

16-1. cmd 창에서 ctrl + c는 끄는 명령어

17. gradlew bootRun -Dspring.profiles.active=test1를 명령어를 사용하려면 build.gradle에서
아래의 코드 추가해야함
bootRun{
	String activeProfile = System.properties['spring.profiles.active']
	systemProperty "spring.profiles.active", activeProfile
}


bootJar{
	archivesBaseName = 'App'
	archiveFileName = 'app.jar'
	archiveVersion = '1'
}

18. cmd창에서 gradlew bootRun -Dspring.profiles.active=test1 명령어 검색

19. C:\IDE\sts-4.22.1.RELEASE\work\BootTest> gradle clean -> gradle clean bootJar

20. C:\IDE\sts-4.22.1.RELEASE\work\BootTest> gradle clean test bootJar

21. vscode
: IDE에 docker 폴더 생성하고 열기

# 대상 이미지
FROM gradle:latest as builder

# 필요한 설정
WORKDIR /app
COPY . .
RUN ./gradlew bootJar

FROM openjdk:latest
COPY --from=builder /app/build/libs /app

# 실행 명령어
EXPOSE 80
ENTRYPOINT ["java", "-jar", "-Dspring.profiles.active=test2", "/app/app.jar"]

22. COPY . .
. (프로젝트 위치)
. (app 위치)

23. bootJar
: 배포 명령어

24. C:\IDE\sts-4.22.1.RELEASE\work\BootTest에 dockerfile을 복사 붙여 넣기 한다.

25. cmd 창에서 docker build . -t boot(이미지 이름) 검색

26. 아래의 순서대로 진행하면 됨
1. C:\IDE 경로에 docker 폴더 생성

2. dockerfile에 아래의 코드 작성
대상 이미지
FROM gradle:latest as builder

필요한 설정
WORKDIR /app
COPY . .
RUN ./gradlew bootJar

FROM openjdk:latest
COPY --from=builder /app/build/libs /app

실행 명령어
EXPOSE 80
ENTRYPOINT ["java", "-jar", "-Dspring.profiles.active=test2", "/app/app.jar"]

3. C:\IDE\sts-4.22.1.RELEASE\work\BootTest 이 경로에 dockerfile 복사 붙여 넣기

4. cmd창에서 docker build . -t boot


27. 만약 boot가 생성되지 않았다면 [docker ps -a] 코드를 써서 설치가 되었는지 확인해야 함
그리고 cmd창에서 docker run -d -it -p 80:80 boot 명령어를 사용하면 다시 생성된다.

28. 
DockerFile 문법
FROM        : 사용할 이미지
MAINTAINER  : 작성자의 정보를 기록
RUN         : FROM의 이미지 위에서 실행될 명령어
COPY        : 도커 컨테이너의 경로로 파일을 복사합니다
ENV         : 도커의 환경변수를 설정
EXPOSE      : 연결할 포트 번호
ENTRYPOINT  : 컨테이너 생성 후 실행될 명령어
CMD         : 컨테이너 시작 이후 실행될 명령어

Docker CLI
build       : Dockerfile로 이미지를 생성
run         : 생성한 이미지를 기반으로 도커를 실행

docker run 옵션
-i          : 컨테이너와 상호 입출력 활성화
-t          : tty 활성화. 주로 -i옵션과 함께 사용
-p          : 포트를 지정
-e          : 환경변수를 지정하거나 값을 변경
-v          : 로컬 저장소 공유

docker build . -t boot
docker run -d -it -p 80:80 boot

29. compose
: 여러개의 컨테이너를 만들수 있다.

30. cmd 창에서 docker compose up -d 명령어 치기

31. HeidiSQL 포트 번호 33306, 비밀번호 9876으로 새로 만들기(docker2)
