20240613
==================================================
1. 프로젝트 생성 관련 2가지 형식
- 기본형(웹 다이나믹 프로젝트) S1
1.1 new -> other -> web -> Dynamic Web Project클릭 -> Project name에 S1 -> Target runtime에서 Apache Tomcat v9.0으로 설정
-> Dynamic web module version 4.0으로 설정

1.2 생성된 S1 프로젝트 클릭 후 -> 우측키 -> Properties -> Resource -> Location에서 show In System Explorer 클릭
-> C:\IDE\sts-4.22.1.RELEASE\work\S1\src\main 경로로 가서 java, webapp폴더 있는지 확인 후 -> 프로젝트로 돌아와서 -> src -> main -> webapp
-> WEB-INF -> lib에 mariadb-java-client-3.4.0jar, mybatis-3.5.16.jar를 넣는다. 그리고 Web app Libraies에서 넣은 mariadb, mybatis 들어갔는지 확인 하면 됨
(c드라이브 -> 사용자 -> hi -> .m2 -> repository -> org -> mariadb -> jdbc -> mariadb-java-client -> 3.4.0 -> mariadb-java-client-3.4.0.jar )
(c드라이브 -> 사용자 -> hi -> .m2 -> repository -> org -> mybatis -> mybatis -> 3.5.16 -> mariadb-java-client -> 3.4.0 -> mybatis-3.5.16.jar)

1.3 src/main/java -> new -> class -> Package에 com.java -> Name에 Home -> Browser 클릭 -> HttpServlet 검색 후 클릭 -> @WebServlet("/home") 입력
-> source -> 우측키 -> override -> doGet -> 아래의 코드 작성 -> Tomcat v9.0에서 Add and remove -> 원하는 서버 넣기 -> 서버 가동
		
		String resource = "mybatis.xml";
		InputStream inputStream = Resources.getResourceAsStream(resource);
		SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
	
		int no = sqlSessionFactory.openSession().selectOne("sql.test");
		System.out.println("no :" + no);


1.4 src/main/java - > mybatis.xml, sql.xml 넣기
-> src/main/java
==================================================





==================================================
- 버전관리형(메이븐 프로젝트) S2
1.1 우측키 - > new -> Maven Project -> Create a simple project 체크 -> next -> Group Id에 com.java(패키지명) -> Artifact Id와 Name에 프로젝트명 S2
-> version은 1로 설정 -> Packaging -> War로 설정

1.2 생성된 S2 프로젝트 클릭 후 -> 우측키 -> Properties -> Resource -> Location에서 show In System Explorer 클릭
-> C:\IDE\sts-4.22.1.RELEASE\work\S2\src\main 경로로 가서 java, webapp, resources폴더 있는지 확인 후 -> 프로젝트로 돌아오기

1.3 생성된 S2 프로젝트 클릭 후 -> Build path -> configure Build path -> Add Library -> Server Runtime -> Apache Tomcat v9.0 클릭 -> Apply

1.4 src/main/java -> 우클릭 -> new -> class -> Package에 com.java, Name에 Home 입력 -> Browser 클릭 -> HttpServlet 검색 후 클릭-> @WebServlet("/home") 입력
-> source -> override -> doGet -> 아래의 코드 작성 -> Tomcat v9.0에서 Add and remove -> 원하는 서버 넣기 -> 서버 가동
		String resource = "mybatis.xml";
		InputStream inputStream = Resources.getResourceAsStream(resource);
		SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
	
		int no = sqlSessionFactory.openSession().selectOne("sql.test");
		System.out.println("no :" + no);


1.5 src/main/resources -> mybatis.xml, sql.xml 넣기

1.6 pom.xml에 <dependencies>, <dependency> 관련 내용 넣기

1.7 생성된 프로젝트 클릭후 -> 우측키 -> Maven -> Update Project 클릭
==================================================






2. 메이븐으로 프로젝트를 생성할 시 src/main/resources에는 xml 파일들이 들어간다.

3. 시험 볼때 강사님은 Maven으로 프로젝트 만드는 것을 추천

4. cmd 창에서 [cd ..] 하면 현재에서 한단계위 단계로 이동(cd는 change directory)

5. cmd 창에서 내가 가고 싶은 위치로 가고 싶으면 [cd 경로작성] 하면 된다.

6. 405 에러
: 보통 client가, server가 요청하지 않는 method 를 사용했을 때 발생(ex, get 또는 post를 보냈을 때 받은 쪽도 get 또는 post로 받아야 한다.) 



[Maven으로 프로젝트 생성시]
package com.java;

import java.io.IOException;
import java.io.InputStream;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.ibatis.io.Resources;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionFactoryBuilder;

@WebServlet("/home")
public class Home extends HttpServlet {

	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		System.out.println("S4 입니다~~");
		
		String resource = "mybatis.xml";
		InputStream inputStream = Resources.getResourceAsStream(resource);
		SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);
		
		int no = sqlSessionFactory.openSession().selectOne("sql.test");
		System.out.println("no : " + no);
		
	}

	
}

<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
  <environments default="development">
    <environment id="development">
      <transactionManager type="JDBC"/>
      <dataSource type="POOLED">
        <property name="driver" value="org.mariadb.jdbc.Driver"/>
        <property name="url" value="jdbc:mariadb://localhost:3306/edu"/>
        <property name="username" value="root"/>
        <property name="password" value="1234"/>
      </dataSource>
    </environment>
  </environments>
  <mappers>
    <mapper resource="sql.xml"/>
  </mappers>
</configuration>

<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="sql">
  <select id="test" resultType="Integer">
  	select 1 as no
  </select>
  
</mapper>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.java</groupId>
  <artifactId>S4</artifactId>
  <version>1</version>
  <packaging>war</packaging>
  <name>S4</name>
  
   <dependencies>
	
	<dependency>
	    <groupId>javax.servlet</groupId>
	    <artifactId>javax.servlet-api</artifactId>
	    <version>4.0.1</version>
	    <scope>provided</scope>
	</dependency>
	
	<dependency>
	    <groupId>org.mariadb.jdbc</groupId>
	    <artifactId>mariadb-java-client</artifactId>
	    <version>3.4.0</version>
	</dependency>
	
	<dependency>
	    <groupId>org.mybatis</groupId>
	    <artifactId>mybatis</artifactId>
	    <version>3.5.16</version>
	</dependency>
	
  </dependencies>
  
  
</project>










