20240902
1. registry.addEndpoint("/ws-app")
: 서버를 켰다라는 의미(위의 코드가 중요)

2. package com.app.config;

@Configuration
@EnableWebSocketMessageBroker
public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {

	@Override
	public void registerStompEndpoints(StompEndpointRegistry registry) {
		// JS에서 웹소켓 접속 시 해당 URL로 연결
		registry.addEndpoint("/ws-app")
			.setAllowedOrigins("http://127.0.0.1:5500", "http://localhost:5500", "http://192.168.0.56:5500") // 프론트쪽 주소
			.withSockJS();
	}

	@Override
	public void configureMessageBroker(MessageBrokerRegistry registry) {
		// 사용자가 서버에게 메세지를 전송할때 
		registry.setApplicationDestinationPrefixes("/msg"); // 백엔드쪽 메소드 호출 하기 위한 주소
		registry.enableSimpleBroker("/topic"); // 프론트앤드 함수에서 데이터 돌려 주기 위한 주소
	}
	
}

3. package com.app.controller;

@Slf4j
@Controller
public class MessageController {
	
	@Autowired
	private SimpMessagingTemplate simpMessagingTemplate;
	
	// "/msg/conn" >> 접속
	@MessageMapping("/conn")
	@SendTo("/topic/bean")
	public Map<String, String> conn(Map<String, String> paramMap) {
		log.info("Path : {}", "/conn");
		return paramMap;
	}
		
	// "/msg/room"
	@MessageMapping("/room")
	public void conn1(@Payload PayloadMessageDTO payloadDTO, SimpMessageHeaderAccessor headerAccessor) {
		log.info("Path : {}", "/room");
		String sessionId = headerAccessor.getSessionId();
		log.info("SessionID : {}", sessionId);
		String topic = payloadDTO.getMessage().getTopic();
		payloadDTO.getMessage().setTime(LocalDateTime.now().format(DateTimeFormatter.ofPattern("HH:mm")));
		if(topic != null) {
			log.info("Payload : {}", payloadDTO);
			simpMessagingTemplate.convertAndSend(topic, payloadDTO);
		}
	}
	
	@EventListener
	public void handleSessionConnectEvent(SessionConnectEvent event) {
		System.out.println("Session Connect Event");
		System.out.println(event);
		// STOMP 헤더 접근기
        StompHeaderAccessor accessor = StompHeaderAccessor.wrap(event.getMessage());
        // 클라이언트가 연결한 Endpoint를 가져오기
        String sessionId = accessor.getSessionId();
        // 연결 정보를 출력
        System.out.println("Client connected with sessionId: " + sessionId);
	}
	
	@EventListener
	public void handleSessionDisconnectEvent(SessionDisconnectEvent event) {
		System.out.println("Session Disconnect Event");
	}
	
}

4. 아래의 코드는 필수 라이브러리이다 
: <script src="https://cdnjs.cloudflare.com/ajax/libs/sockjs-client/1.5.0/sockjs.min.js"></script>
: <script src="https://cdnjs.cloudflare.com/ajax/libs/stomp.js/2.3.3/stomp.min.js"></script

5. const EVENT1 = (endpoint) => {
        stompClient = Stomp.over(new SockJS(server+endpoint)); // 소켓 하나 연결하는 코드이다.
        stompClient.debug = () => {}; // 코드를 막는 코드
        stompClient.connect({}, EVENT5, error => {console.log("ERROR",error); alert("서버가 종료 되었습니다."); resetForm();});
    };
: stompClient = Stomp.over(new SockJS(server+endpoint)); 	
// 소켓 하나 연결하는 코드이다.

6. // 웹소켓에서 전달 받은 메세지 출력 이벤트
    const DRAW = (payload) => {
        let messagePosition = isValidUse(payload) ? 'message-right' : 'message-left';
        let messageContentPosition = isValidUse(payload) ? 'message-content-right' : 'message-content-left';
        let messageTimePosition = isValidUse(payload) ? 'message-left' : 'message-right';
        let html = `<div class="message ${messagePosition}">
                <h3 class="message-user">${payload.user.userNm}:</h3>
                <div class="message-body">
                    <p class="message-content ${messageContentPosition}">${payload.message.message}</p>
                    <p class="message-time ${messageTimePosition}">${payload.message.time}</p>
                </div>
            </div>`;
        $(".messages").append(html);
        $('.messages').scrollTop($('.messages')[0].scrollHeight);
    };
	
	<div class="messages">
                <!--
                <div class="message">
                    <h3 class="message-user">친구1:</h3>
                    <div class="message-body">
                        <p class="message-content">안녕하세요!</p>
                        <p class="message-time message-right">15:32</p>
                    </div>
                </div>
                <div class="message message-right">
                    <h3 class="message-user">나:</h3>
                    <div class="message-body">
                        <p class="message-content">안녕!!</p>
                        <p class="message-time message-left">15:35</p>
                    </div>
                </div>
                -->
            </div>	
			
7. <html lang="ko">
	<head>
    <meta charset="UTF-8">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/sockjs-client/1.5.0/sockjs.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/stomp.js/2.3.3/stomp.min.js"></script>
    <title>PAGE1</title>
    <script>
        const socket = new SockJS("http://localhost:8080/ws-app");
        const client = Stomp.over(socket); // 소켓 연결하는 코드이다.
        // 성공 했을때
        const e1 = () => {
            console.log("접속 성공");
        };
        // 오류 났을때
        const e2 = () => {
            console.log("접속 실패");
        };
        client.connect({}, e1, e2);
        
    </script>
</head>
<body>  
</body>
</html>

8.<html lang="ko">
	<head>
    <meta charset="UTF-8">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/sockjs-client/1.5.0/sockjs.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/stomp.js/2.3.3/stomp.min.js"></script>
    <title>PAGE1</title>
    <script>
        const socket = new SockJS("http://localhost:8080/ws-app");
        const client = Stomp.over(socket); // 소켓 연결하는 코드이다.
        // 성공 했을때
        const e1 = () => {
            console.log("접속 성공");
            client.subscribe("/topic/get", res => console.log(res));
        }  
        // 오류 났을때
        const e2 = () => console.log("접속 실패");
        // 소켓 접속 하기 ,e1은 정상 콜백함수, ,e2는 오류 콜백함수
        client.connect({}, e1, e2);
        // 메세지 전송 이벤트
        const e3 = () => {
            console.log(client);
            if(client.connected == true){
                client.send("/msg/set", {}, "Test 글입니다."); // 접속 성공을 확인 한 후에 메세지 전송
            } else {
                alert("소켓 정보가 없습니다.");
            }
        }
    </script>
</head>
<body>
     <button type="button" onclick="e3()">메시지 전송</button>
</body>
</html>

9. body안에는 "입력한 데이터"가 있다

10.    const e1 = () => {
            console.log("접속 성공");
            client.subscribe("/topic/get", res => console.log(res)); // 돌려 받는 구독
        }  
: client.subscribe("/topic/get", res => console.log(res)); // 돌려 받는 구독


11. 깃허브
1. 개인 저장소(팀원 초대)
- repository 주인이 오너
- Collaboratiors

2. 조직 저장소 (팀원 초대)
- organization

둘중 한개 선택

3. 권한선택 main은 뿌리, branch를 각각 개발자한테 준다. 그리고 나서 branch에서 main으로 합치는 방향
파일이(프로젝트) 올라간 상태에서 branch를 쪼개야 각각에 파일이 올라간다.
기능 구현시 branch를 쪼개야 한다.

4. branch - > merge
: Insights -> Network graph에서 로그 확인 가능

5. 동일한 파일명으로 했을경우, merge 할때 오류가 생긴다.

6. 파일 관리는 한명이서 하는게 좋다.

7. 프로젝트명 = repository명

8. 초기셋팅이 중요
: 초기에 빈파일이면 파일이 올라가지 않는다.

9. 메인에(main) 기본이 되는 파일을 먼저 올리고 나서 -> branch를 쪼개야 한다.

10. branch가 쪼개지는 순간 각자이다.(네이밍중요 겹치지 않게 먼저 설계)

11. 문제 있으면 history back 하면 된다.

12. Pull requests에서 merge하기

13. local에서 할때 cmd 창에서 git clone 주소입력(복사한 주소)

14. git branch

14-1. git branch "나의 branch이름 작성"

14-2. git checkout "나의 branch이름 작성"

15. git add *

16. git commit -m "파일 올릴께요"

17. git push origin main

18. merge를 해야 main애서 볼수 있어야 한다.

19. 파일을 올리거나, 수정하거나 할때 무조건 본인 branch인지 확인하고 merge 해야한다.

20. 강사님 파일 다운 받을때 왜 파일명에 main이 붙은 이유를 알게 됨.

21. 계속 연습해야 한다.
