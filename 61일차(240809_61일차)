20240809
1. user 테이블에 userRole 컬럼을 넣는이유?
: 우리 회사 직원과 외부 사람 이렇게 구분 지으려고 넣는다. 그리고 더불어서 role 테이블을 추가적으로 만든다.
: 권한 구분 지으려고 한다.

2. 다대다를 막기 위해 중간에 징검다리 테이블을 만들어서 다대다를 방지한다.

3. @RestController는 뷰를 쓰지 않을 때 사용하고 뷰를 사용할때는 @Controller를 사용해야 한다.

4. 자바스크립트에서 const를 사용해서 변수 처리한다.

5. $("tbody tr").on("click", function(){alert("접근 불가");});
     {대상자 찾기}

6. $("tbody tr").on("click", function(){
console.log(this);
});

7. $("tbody tr").on("click", function(){
	//console.log(this, $(this));
	console($(this).children("td"));
});

: console창(F12)에서 innerHTML, innerText 를 찾아야 한다.

8. 7. $("tbody tr").on("click", function(){
	//console.log(this, $(this));
	alert($(this).children("td").eq(0).text()+ "번호에 접근 불가");
});

9. 이벤트는 "행"한테 주는것이다.

10. 세션을 만들어줘서 로그인 후 번호, 이름 롤 가지고 다니는 로직
//	@ResponseBody
	@PostMapping("/login")
	public String login(@ModelAttribute UserDTO userDTO, HttpServletRequest req) {
		UserResultDTO userResultDTO = companyService.findByUser(userDTO);
		if(userResultDTO.isStatus()) {
			HttpSession http = req.getSession();
			http.setAttribute("userNo", userResultDTO.getUserDTO().getUserNo());
			http.setAttribute("userNm", userResultDTO.getUserDTO().getUserNm());
			http.setAttribute("userRole", userResultDTO.getUserDTO().getUserRole());
			return "redirect:/";
		}
		return "redirect:/login";




-- root 사용자로 접속 후 실행
USE mysql;

CREATE DATABASE company;

GRANT ALL ON company.* TO 'test'@'localhost';

FLUSH PRIVILEGES;

SHOW GRANTS FOR 'test'@'localhost';

-- test 사용자로 접속 후 실행
USE company;

CREATE TABLE `user` (
	userNo INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
	userNm VARCHAR(50) NOT NULL,
	userPwd VARCHAR(50) NOT NULL,
	userEnable BOOLEAN NOT NULL DEFAULT 1,
	userRole VARCHAR(10) NOT NULL DEFAULT 'USER'
);

CREATE TABLE `notice` (
	noticeNo INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
	noticeTitle VARCHAR(50)NOT NULL,
	noticeContent VARCHAR(255)NULL,
	userNo INT NOT NULL
);

CREATE TABLE `role` (
	roleNo INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
	roleNm VARCHAR(50) NOT NULL
);


CREATE TABLE `notice` (
	noticeNo INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
	noticeTitle VARCHAR(50)NOT NULL,
	noticeContent VARCHAR(255)NULL,
	userNo INT NOT NULL
);

SELECT * FROM notice;
INSERT INTO  notice (noticeTitle, noticeContent, userNo) VALUES ('글제목1', '내용 테스트', 1);
INSERT INTO  notice (noticeTitle, noticeContent, userNo) VALUES ('글제목2', '글 넣어 보기', 2);
INSERT INTO  notice (noticeTitle, noticeContent, userNo) VALUES ('글제목3', '하나 부터 열까지!!', 4);
INSERT INTO  notice (noticeTitle, noticeContent, userNo) VALUES ('글제목4', '자유게시판 가즈아', 5);
INSERT INTO  notice (noticeTitle, noticeContent, userNo) VALUES ('글제목5', '테스트 중입니다.', 6);
INSERT INTO  notice (noticeTitle, noticeContent, userNo) VALUES ('글제목6', '글 작성 잘 됩니다.', 9);
INSERT INTO  notice (noticeTitle, noticeContent, userNo) VALUES ('글제목7', '연습용1', 11);
INSERT INTO  notice (noticeTitle, noticeContent, userNo) VALUES ('글제목8', '연습용2', 11);
INSERT INTO  notice (noticeTitle, noticeContent, userNo) VALUES ('글제목9', '누군지 알아보세요', 14);
INSERT INTO  notice (noticeTitle, noticeContent, userNo) VALUES ('글제목10', '아무도 모르겠지?', 16);

COMMIT;

CREATE TABLE `user` (
	userNo INT NOT NULL AUTO_INCREMENT PRIMARY KEY,
	userNm VARCHAR(50) NOT NULL,
	userPwd VARCHAR(50) NOT NULL,
	userEnable BOOLEAN NOT NULL DEFAULT 1,
	userRole VARCHAR(10) NOT NULL DEFAULT 'USER'
);


SELECT * FROM user;
INSERT INTO  user (userNm, userPwd, userEnable, userRole) VALUES ('사용자1', 'pwd1', 1, 'USER');
INSERT INTO  user (userNm, userPwd, userEnable, userRole) VALUES ('사용자2', 'pwd2', 1, 'USER');
INSERT INTO  user (userNm, userPwd, userEnable, userRole) VALUES ('사용자3', 'pwd3', 1, 'USER');
INSERT INTO  user (userNm, userPwd, userEnable, userRole) VALUES ('사용자4', 'pwd4', 1, 'USER');
INSERT INTO  user (userNm, userPwd, userEnable, userRole) VALUES ('사용자5', 'pwd5', 1, 'USER');
INSERT INTO  user (userNm, userPwd, userEnable, userRole) VALUES ('사용자6', 'pwd6', 1, 'USER');
INSERT INTO  user (userNm, userPwd, userEnable, userRole) VALUES ('사용자7', 'pwd7', 1, 'USER');
INSERT INTO  user (userNm, userPwd, userEnable, userRole) VALUES ('사용자8', 'pwd8', 1, 'USER');
INSERT INTO  user (userNm, userPwd, userEnable, userRole) VALUES ('사용자9', 'pwd9', 1, 'USER');
INSERT INTO  user (userNm, userPwd, userEnable, userRole) VALUES ('사용자10', 'pwd10', 1, 'USER');
INSERT INTO  user (userNm, userPwd, userEnable, userRole) VALUES ('사용자11', 'pwd11', 1, 'USER');
INSERT INTO  user (userNm, userPwd, userEnable, userRole) VALUES ('사용자12', 'pwd12', 1, 'USER');
INSERT INTO  user (userNm, userPwd, userEnable, userRole) VALUES ('사용자13', 'pwd13', 1, 'USER');
INSERT INTO  user (userNm, userPwd, userEnable, userRole) VALUES ('사용자14', 'pwd14', 1, 'USER');
INSERT INTO  user (userNm, userPwd, userEnable, userRole) VALUES ('사용자15', 'pwd15', 1, 'USER');
INSERT INTO  user (userNm, userPwd, userEnable, userRole) VALUES ('사용자16', 'pwd16', 1, 'USER');
INSERT INTO  user (userNm, userPwd, userEnable, userRole) VALUES ('사용자17', 'pwd17', 1, 'USER');
INSERT INTO  user (userNm, userPwd, userEnable, userRole) VALUES ('사용자18', 'pwd18', 1, 'USER');
INSERT INTO  user (userNm, userPwd, userEnable, userRole) VALUES ('사용자19', 'pwd19', 1, 'USER');
INSERT INTO  user (userNm, userPwd, userEnable, userRole) VALUES ('사용자20', 'pwd20', 1, 'USER');
COMMIT;


