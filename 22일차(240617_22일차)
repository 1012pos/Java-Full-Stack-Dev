20240617
1. C:\IDE\sts-4.22.1.RELEASE\work\git
: 강사님 github 파일

2. github 하는 방법 및 clone 해서 프로젝트 여러개 하는 방법 공부하기

3. 커머스 회사
AS-IS, TO-BE

4. AS-IS -> TO-BE를 만들어야 한다.

5. 현행 시스템 분석
: AS-IS

6. 개선될 시스템 분석
: TO-BE

7. 이번주 목요일 1~2장 발표

8. 분석 클래스 목록 (요구사항 확인)

9. Maven 

10. AbstractAnnotationConfigDispatcherServletInitializer 이거를 상속받으면 web.xml을 만들지 않아도 사용가능
WebConfig.java 파일

package app.config;

import org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;

public class WebConfig extends AbstractAnnotationConfigDispatcherServletInitializer {

	@Override
	protected Class<?>[] getRootConfigClasses() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	protected Class<?>[] getServletConfigClasses() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	protected String[] getServletMappings() {
		// TODO Auto-generated method stub
		return null;
	}

}

11. src -> main -> webapp-> WEB-INF -> web.xml 파일의 코드에서 <context-param> 이부분이랑 같은 맥략은 아래와 같다.
: @Override
	protected Class<?>[] getRootConfigClasses() {
		return null; // 외부 설정 내용 등록(Mybatis)
	}
	
12. src -> main -> webapp -> WEB-INF -> web.xml 파일의 코드에서 <servlet> 이부분이랑 같은 맥략은 아래와 같다.
: @Override
	protected Class<?>[] getServletConfigClasses() {
		return null; // 스프링 관련 설정 내용 등록
	}	
 
 
 13. src -> main -> webapp-> WEB-INF -> web.xml 파일의 코드에서 <servlet-mapping> 이부분이랑 같은 맥략은 아래와 같다.
 : @Override
	protected String[] getServletMappings() {
		return null; // URL 패턴 등록
	}

14. http://localhost:8080/SpringStudy2/
: 안녕이 떠야함.

15. servlet-context.xml에서 beans:beans에서 엑박 뜨면 아래와 같이 해결해주면 된다.
: window -> Preferences -> XML(Wild Web Developer) 여기서 체크해줘야함

16. WEB-INF 밑에 web.xml 파일을 만들지 않기 위해 위의 내용들을 한것이다.

17. SpringConfig.java 파일에 있는 코드 때문에 -> HomeController.java에 있는 코드를 사용할 수 있다.

18. /WEB-INF 하위 파일들을 만드는 이유는 원래부터 하위 파일들을 접근할수 없게 설정되어 있기 때문이며,
JSP파일을 직접적으로 부를수 없게 할수 있는 방법이 이 방법뿐이다. 그렇기 때문에 URL을 통해 접근할수가 없다.
그리고 Spring에서 ViewResolver를 사용하기 위함도 있으며 화면을 출력용을 만들기 위해서이다.
@Override
	public void configureViewResolvers(ViewResolverRegistry registry) {
		InternalResourceViewResolver ivs = new InternalResourceViewResolver();
		ivs.setPrefix("/WEB-INF/views/");
		ivs.setSuffix(".jsp");
		registry.viewResolver(ivs);
	
	}
	
package app.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class HomeController {

	@GetMapping("/")
	public String home() {
		return "home";
	}
	
}

: /WEB-INF/views/  +   ? 가변적(ex, home)+ .jsp
-> /WEB-INF/views/  +    home + .jsp
따라서 위의 적은 코드 처럼 조합이 될수 있는게 있는게, "Spring의 ViewResolver"가 해준다.

19. Spring은 MVC2 이다. / Controller + view를 함께 한게 MVC1 모델이다.

20. Service영역, DAO영역, Domain영역이 Model이라고한다.

21. @Controller -> @Service -> @Repository

22. build Path 설정
: 프로젝트 -> 우측키 -> build path - > Configure build path -> Java Build Path-> Library 탭 -> Edit -> 원하는 버전 체크하기
: 프로젝트 -> 우측키 -> build path - > Configure build path -> Java Compiler -> JDK Compliance -> 원하는 버전 선택
: 프로젝트 -> 우측키 -> build path - > Configure build path -> Java -> 원하는 버전 선택 / Dynamic Web Module 4.0 선택

23. tomcat v9.0 Server 실행이 안될시
: Add and Remove 서버 빼고, 톰캣 실행 중지 시키고, 수정해야 할 것들을 수정해야함
톰캣 서버를 빼고, 정지하고 수정하지 않으면 내가 적용한 내용이 수정이 안된다.

24. html 파일을 jsp 파일로 변환할때 한글이 깨지는 이유는 html 파일에는
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%> 이부분이 없기 때문에
위의 코드를 추가해주면 html -> jsp 파일로 변환했을때 한글이 깨지지 않는다.



package app.config;

import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
import org.springframework.web.servlet.config.annotation.ViewResolverRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
import org.springframework.web.servlet.view.InternalResourceViewResolver;


@Configuration
@EnableWebMvc
@ComponentScan(basePackages = {"app"})
public class SpringConfig implements WebMvcConfigurer {

	@Override
	public void configureViewResolvers(ViewResolverRegistry registry) {
		InternalResourceViewResolver ivs = new InternalResourceViewResolver();
		ivs.setPrefix("/WEB-INF/views/");
		ivs.setSuffix(".jsp");
		registry.viewResolver(ivs);
	
	}

	@Override
	public void addResourceHandlers(ResourceHandlerRegistry registry) {
		registry.addResourceHandler("/resources/**").addResourceLocations("/resources/");
	}

	
	
	
}


package app.config;

import org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;

public class WebConfig extends AbstractAnnotationConfigDispatcherServletInitializer {

	@Override
	protected Class<?>[] getRootConfigClasses() {
		return null; // 외부 설정 내용 등록(Mybatis)
	}

	@Override
	protected Class<?>[] getServletConfigClasses() {
		return new Class[] {SpringConfig.class}; // 스프링 관련 설정 내용 등록
	}

	@Override
	protected String[] getServletMappings() {
		return new String[] {"/"}; // URL 패턴 등록
	}

}



<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>app</groupId>
  <artifactId>SpringStudy2</artifactId>
  <version>1</version>
  <packaging>war</packaging>
  <name>SpringStudy2</name>
  
  <properties>
	<encoding-type>UTF-8</encoding-type>
	<java-version>11</java-version>
	<org.springframework-version>5.3.36</org.springframework-version>
  </properties>

  <dependencies>
	
	<dependency>
	    <groupId>javax.servlet</groupId>
	    <artifactId>servlet-api</artifactId>
	    <version>2.5</version>
	    <scope>provided</scope>
	</dependency>
	

	<dependency>
	    <groupId>org.springframework</groupId>
	    <artifactId>spring-core</artifactId>
	    <version>${org.springframework-version}</version>
	</dependency>
	<dependency>
	    <groupId>org.springframework</groupId>
	    <artifactId>spring-context</artifactId>
	    <version>${org.springframework-version}</version>
	</dependency>
	<dependency>
	    <groupId>org.springframework</groupId>
	    <artifactId>spring-webmvc</artifactId>
	    <version>${org.springframework-version}</version>
	</dependency>
	<dependency>
	    <groupId>org.springframework</groupId>
	    <artifactId>spring-jdbc</artifactId>
	    <version>${org.springframework-version}</version>
	</dependency>
	<dependency>
	    <groupId>org.springframework</groupId>
	    <artifactId>spring-tx</artifactId>
	    <version>${org.springframework-version}</version>
	</dependency>
	<dependency>
	    <groupId>org.springframework</groupId>
	    <artifactId>spring-test</artifactId>
	    <version>${org.springframework-version}</version>
	</dependency>


	<dependency>
	    <groupId>org.mariadb.jdbc</groupId>
	    <artifactId>mariadb-java-client</artifactId>
	    <version>3.4.0</version>
	</dependency>
	<dependency>
	    <groupId>org.mybatis</groupId>
	    <artifactId>mybatis</artifactId>
	    <version>3.5.16</version>
	</dependency>
	<dependency>
	    <groupId>org.mybatis</groupId>
	    <artifactId>mybatis-spring</artifactId>
	    <version>3.0.3</version>
	</dependency>

  </dependencies>
  
   <build>
        <plugins>
	        <plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>3.3.2</version>
				<configuration>
					<failOnMissingWebXml>false</failOnMissingWebXml>
				</configuration>
			</plugin>
            <plugin>
                <artifactId>maven-eclipse-plugin</artifactId>
                <version>2.9</version>
                <configuration>
                    <additionalProjectnatures>
                        <projectnature>org.springframework.ide.eclipse.core.springnature</projectnature>
                    </additionalProjectnatures>
                    <additionalBuildcommands>
                        <buildcommand>org.springframework.ide.eclipse.core.springbuilder</buildcommand>
                    </additionalBuildcommands>
                    <downloadSources>true</downloadSources>
                    <downloadJavadocs>true</downloadJavadocs>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>2.5.1</version>
                <configuration>
                    <source>${java-version}</source>
                    <target>${java-version}</target>
                    <compilerArgument>-Xlint:all</compilerArgument>
                    <showWarnings>true</showWarnings>
                    <showDeprecation>true</showDeprecation>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>1.2.1</version>
                <configuration>
                    <mainClass>org.test.int1.Main</mainClass>
                </configuration>
            </plugin>
        </plugins>
  </build>
  
  
  
  
</project>




package app.controller;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class HomeController {

	@GetMapping("/") // 화면 출력용
	public String home(Model model) {
		model.addAttribute("name", "홍길동");
		return "home";
	}
	
}



<%@ page language="java" contentType="text/html; charset=EUC-KR"
    pageEncoding="EUC-KR"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>HOME</title>
</head>
<body>
 <h1>안녕</h1>
 <%
 	Object obj = request.getAttribute("name");
 	out.println(obj);
 %>
</body>
</html>


==============================<위의 코드와 동일하지만 ,${name}라는 표현식을 사용했음>======================================
<%@ page language="java" contentType="text/html; charset=EUC-KR"
    pageEncoding="EUC-KR"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>HOME</title>
</head>
<body>
 <h1>안녕</h1>
 <%
 	Object obj = request.getAttribute("name");
 	out.println(obj);
 %>
 
 <p>${name}</p> <!-- 위의 코드로 작성하면 불편해서 ${name}식으로 표현식을 사용(데이터 출력용)  -->
 
</body>
</html>
=======================================================================================================================

package app.controller;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class HomeController {

	@GetMapping("/")
	public String home(Model model) {
		System.out.println("안녕");
		model.addAttribute("name", "홍길동");
		return "home";
	}
	
	@GetMapping("/page1")
	public String page1() {
		
		
		
		return "page1";
	}
	
	@GetMapping("/page2")
	public String page2(Model model, HttpServletRequest req) {
		
		String dan = req.getParameter("dan");
		System.out.println(dan);
		
		int s = 1;
		int d = 0;
		
		if(dan == null || "A".equals(dan)) {
			s = 1;
			d = 10;
		}else if("1".equals(dan)) {
			s = 1;
			d = 2;
		}else if("2".equals(dan)) {
			s = 2;
			d = 3;
		}else if("3".equals(dan)) {
			s = 3;
			d = 4;
		}else if("4".equals(dan)) {
			s = 4;
			d = 5;
		}else if("5".equals(dan)) {
			s = 5;
			d = 6;
		}else if("6".equals(dan)) {
			s = 6;
			d = 7;
		}else if("7".equals(dan)) {
			s = 7;
			d = 8;
		}else if("8".equals(dan)) {
			s = 8;
			d = 9;
		}else if("9".equals(dan)) {
			s = 9;
			d = 10;
		}
		
		List list = new ArrayList<>(); 
		for(int i = s; i < d; i++ )
		{
			List list2 = new ArrayList<>();
			for(int j = 1; j < 10; j++) {
				String str = i + " * " + j + " = " + (i * j);
//				System.out.println();
				list2.add(str);
			}
			list.add(list2);
		}
		model.addAttribute("dan", s);
		model.addAttribute("list", list);
		return "page2";
	}
	
}




<%@page import="java.util.List"%>
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>구구단</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    body {background-color: #2d2521;}
  </style>
</head>
<body>

	<div class="container mt-3">
	  <h1 class="text-white text-center">구구단</h1>
		<form action="" method="get">
			<div class="input-group mb-3">
	       <select class="form-select" name="dan" id="dan">
	         <option value="A">전체</option>
	         <option value="1">1단</option>
	         <option value="2">2단</option>
	         <option value="3">3단</option>
	         <option value="4">4단</option>
	         <option value="5">5단</option>
	         <option value="6">6단</option>
	         <option value="7">7단</option>
	         <option value="8">8단</option>
	         <option value="9">9단</option>
	       </select>
				<button class="btn btn-success" type="submit">
	         <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" fill="currentColor" class="bi bi-view-list" viewBox="0 0 16 16">
	           <path d="M3 4.5h10a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2m0 1a1 1 0 0 0-1 1v3a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1v-3a1 1 0 0 0-1-1zM1 2a.5.5 0 0 1 .5-.5h13a.5.5 0 0 1 0 1h-13A.5.5 0 0 1 1 2m0 12a.5.5 0 0 1 .5-.5h13a.5.5 0 0 1 0 1h-13A.5.5 0 0 1 1 14"/>
	         </svg>
				</button>
			</div>
	  </form>
  </div>
<!-- 반복 시작 -->
<%
	Object obj = request.getAttribute("list"); // 구구단 데이터 가져오기
	Object dan = request.getAttribute("dan");  // 시작 단 데이터 가져오기
// 	out.println(obj);
	if(obj != null) {						   // 구구단 출력할 데이터 유무 확인용
		List list = (List) obj;				   // 구구단 출력할 데이터 리스트 형변환 처리
		for(int i = 0; i < list.size(); i++) { // 구구단 첫번째 반복문 시작 > 단를 반복
			int d = Integer.parseInt( dan.toString() ); // 시작 단 데이터 정수값으로 형변환 처리
%>
  <div class="container mt-3">
    <h2 class="text-white text-center"><%= d + i %>단</h2> <!-- 화면에 출력할 단 계산(시작단 + 반복 변수) -->
    <div class="row text-center mt-3 fs-3">
<%
		Object obj2 = list.get(i);			// 구구단 리스트 안에 있는 출력 데이터 리스트 가져오기
		if(obj2 != null) {					// 출력 데이터 리스트 유무 확인용
			List list2 = (List) obj2;		// 출력 데이터 리스트 데이터 리스트 형변환 처리
			for(int j = 0; j < list2.size(); j++) { // 출력할 반복문 시작
				Object obj3 = list2.get(j); // 출력 데이터 리스트에서 값 가져오기
%>    
		      <div class="col-sm-4">
		        <p class="text-bg-light"><%=obj3%></p> <!-- 가져온 값 출력하기 -->
		      </div>
<%
			}
		}
%>
    </div>
  </div>
<%
		}
	}
%>
<!--   <div class="container mt-3"> -->
<!--     <h2 class="text-white text-center">2단</h2> -->
<!--     <div class="row text-center mt-3 fs-3"> -->
<!--       <div class="col-sm-4"> -->
<!--         <p class="text-bg-light">2 * 1 = 2</p> -->
<!--       </div> -->
<!--       <div class="col-sm-4"> -->
<!--         <p class="text-bg-light">2 * 2 = 4</p> -->
<!--       </div> -->
<!--       <div class="col-sm-4"> -->
<!--         <p class="text-bg-light">2 * 3 = 6</p> -->
<!--       </div> -->
<!--       <div class="col-sm-4"> -->
<!--         <p class="text-bg-light">2 * 4 = 8</p> -->
<!--       </div> -->
<!--       <div class="col-sm-4"> -->
<!--         <p class="text-bg-light">2 * 5 = 10</p> -->
<!--       </div> -->
<!--       <div class="col-sm-4"> -->
<!--         <p class="text-bg-light">2 * 6 = 12</p> -->
<!--       </div> -->
<!--       <div class="col-sm-4"> -->
<!--         <p class="text-bg-light">2 * 7 = 14</p> -->
<!--       </div> -->
<!--       <div class="col-sm-4"> -->
<!--         <p class="text-bg-light">2 * 8 = 16</p> -->
<!--       </div> -->
<!--       <div class="col-sm-4"> -->
<!--         <p class="text-bg-light">2 * 9 = 18</p> -->
<!--       </div> -->
<!--     </div> -->
<!--   </div> -->

<!--   <div class="container mt-3"> -->
<!--     <h2 class="text-white text-center">3단</h2> -->
<!--     <div class="row text-center mt-3 fs-3"> -->
<!--       <div class="col-sm-4"> -->
<!--         <p class="text-bg-light">3 * 1 = 3</p> -->
<!--       </div> -->
<!--       <div class="col-sm-4"> -->
<!--         <p class="text-bg-light">3 * 2 = 6</p> -->
<!--       </div> -->
<!--       <div class="col-sm-4"> -->
<!--         <p class="text-bg-light">3 * 3 = 9</p> -->
<!--       </div> -->
<!--       <div class="col-sm-4"> -->
<!--         <p class="text-bg-light">3 * 4 = 12</p> -->
<!--       </div> -->
<!--       <div class="col-sm-4"> -->
<!--         <p class="text-bg-light">3 * 5 = 15</p> -->
<!--       </div> -->
<!--       <div class="col-sm-4"> -->
<!--         <p class="text-bg-light">3 * 6 = 18</p> -->
<!--       </div> -->
<!--       <div class="col-sm-4"> -->
<!--         <p class="text-bg-light">3 * 7 = 21</p> -->
<!--       </div> -->
<!--       <div class="col-sm-4"> -->
<!--         <p class="text-bg-light">3 * 8 = 24</p> -->
<!--       </div> -->
<!--       <div class="col-sm-4"> -->
<!--         <p class="text-bg-light">3 * 9 = 27</p> -->
<!--       </div> -->
<!--     </div> -->
<!--   </div> -->

<!-- 반복 끝 -->
</body>
</html>

