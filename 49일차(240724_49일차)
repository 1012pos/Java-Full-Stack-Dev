20240724
0. SpringTest
1. Junit
- controller 부분
: TestController.java 참조
: MvcResult / .andReturn();
: ResultActions
: @WebMvcTest({TestController.class, TestDataController.class, ViewController.class})

- service 부분 
: Temp1ServiceTest.java 참조



================================================
[Test 방법]
2. HomeController.java
package com.app.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class HomeController {
	
	@GetMapping("/")
	public String home() {
		return "home";
	}

}


3. HomeControllerTest.java
package com.app.controller;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.ResultActions;

@WebMvcTest(HomeController.class)
public class HomeControllerTest {
	
	@Autowired
	private MockMvc mockMvc;
	
	
	@Test
	void home() throws Exception {
		// 방법1(바로 확인하는 방법)
		ResultActions 결과1 = mockMvc.perform(get("/"));
		결과1.andExpect(status().isOk()); // 상태값 200
		
		
		// 방법2(꺼내서 확인하는 방법)
		MvcResult 결과2 = mockMvc.perform(get("/")).andReturn();
		int status = 결과2.getResponse().getStatus();
		assertThat(status).isEqualTo(200); // 밑에랑 같은것임
		assertEquals(200, status); // 위에꺼랑 같은 것임
	}

}

================================================

4. HomeControllerTest.java

	@Test
	void home2() throws Exception {
		MvcResult 결과2 = mockMvc.perform(get("/")).andReturn();
		
		// return "home";
		String viewName = 결과2.getModelAndView().getViewName();
		assertEquals("home", viewName);
	}


: getModelAndView().getViewName(), 여기서 getModelAndView(), getViewName() 둘다 메소드임

5. HomeController.java
package com.app.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.servlet.ModelAndView;

@Controller
public class HomeController {
	
	@GetMapping("/")
	public ModelAndView home(ModelAndView mav) {
		mav.setViewName("home");
		return mav;
	}
	
//	@GetMapping("/")
//	public String home() {
//		return "home";
//	}

}

6. cmd창 C:\IDE\sts-4.22.1.RELEASE\work\BootTest>gralde clean 명령어 검색
: build 삭제됨

7. cmd 창 C:\IDE\sts-4.22.1.RELEASE\work\BootTest>gradle test
: cmd 창에서 test 됨, junit과 같은 기능을 하는 명령어임

8. cmd 창 C:\IDE\sts-4.22.1.RELEASE\work\BootTest>gradle clean test bootJar
: build 삭제 후, app.jar가 생성된다.(배포 명령어)

9. cmd 창 C:\IDE\sts-4.22.1.RELEASE\work\BootTest>dir
: cmd 창 C:\IDE\sts-4.22.1.RELEASE\work\BootTest 디렉터리에 
: build가 생성된것을 알 수 있음 build는 배포되었다는 의미

10. C:\IDE\sts-4.22.1.RELEASE\work\BootTest\build\libs에 가면
C:\IDE\sts-4.22.1.RELEASE\work\BootTest>cd build
: build 폴더로 이동
C:\IDE\sts-4.22.1.RELEASE\work\BootTest\build>cd libs
: libs 폴더로 이동
C:\IDE\sts-4.22.1.RELEASE\work\BootTest\build\libs>
: app.jar가 생성되어 있는것을 확인할 수 있다.

11. docker 는 image(대상 이미지)가 있어야 container를 만들수 있다.
image는 docker hub에서 가져올 수 있다.(다운 받을 수 있다.)

12. dockerfile과 grdlew의 위치가 똑같아야 한다.

13. cmd 창에서 C:\IDE\sts-4.22.1.RELEASE\work\BootTest>docker build . -t boot
: docker desktop의 images에 boot라는 이름으로 생성된다.

14. cmd 창에서 C:\IDE\sts-4.22.1.RELEASE\work\BootTest>docker images
: 이미지가 생성된 것을 확인할 수 있는 명령어

15. docker desktop에서 boot라는 이름으로 Images가 생성되어 있는 것을 확인할 수 있다.

16. cmd 창에서 C:\IDE\sts-4.22.1.RELEASE\work\BootTest>docker run -it boot
: docker desktop에서 container가 생성된것을 확인할 수 있다.(docker run -it boot는 컨테이너 생성 명령어)

16-1. cmd 창에서 C:\IDE\sts-4.22.1.RELEASE\work\BootTest>docker run -d --name App boot:latest
: 생성된 이미지(image)를 컨테이너(container)로 생성, 생성된 Container인 App을 클릭 후 Files탭에서 확인가능 하면 app폴더가 확인됨

17. 생성된 Container인 App을 클릭 후 Exec탭에서 cd app 명령어 및 ls -l 명령어 치기
: gradle test
: gradle bootJar
: ls -l
: cd build
: ls -l
: cd libs
: ls -l
> app.jar 파일을 확인할 수 있다.

18. cmd 창에서 C:\IDE\sts-4.22.1.RELEASE\work\BootTest>docker rm 파일명
: docker 컨테이너 삭제하는 명령어

19. cmd 창에서 C:\IDE\sts-4.22.1.RELEASE\work\BootTest>docker ps -a
: 확인하는 명령어

20. docker run -d -p 80:80 --name App boot
: App이라는 Container에 80 포트가 생성되게 하는 명령어

21. cmd 창에서 아래의 명령어 입력
> C:\IDE\sts-4.22.1.RELEASE\work\BootTest>gradle clean test bootJar
> C:\IDE\sts-4.22.1.RELEASE\work\BootTest>docker build . -t boot
: 이미지 생성하는 명령어
> C:\IDE\sts-4.22.1.RELEASE\work\BootTest>docker run -d --name Test boot:latest
: 컨테이너 생성하는 명령어
> C:\IDE\sts-4.22.1.RELEASE\work\BootTest>docker run -d -p 80:80 --name App boot
: 컨테이너 생성하는 명령어인데, 추가적으로 80포트를 추가하는 명령어 


21. -d (데몬을 의미), -p(포트를 의미), --name(컨테이너를 의미)


22. 
# 대상 이미지
#FROM gradle:latest

# 필요한 설정
# 해당 폴더 생성 및 이동
#WORKDIR /App

# 파일 또는 폴더 복사 (로컬, 컨테이너)
#COPY . .

#RUN gradle clean test bootJar

# 도커파일을 이용하여 이미지 생성
# docker run -it boot

# 생성된 이미지를 컨테이너로 생성 및 실행
# docker run -d --name App boot:latest

# 현재 위치 : pwd
# 디렉토리 내용 보기 : ls -al

# 실행 명령어
#ENTRYPOINT [ "sleep", "infinity" ]

# 프로젝트 배포를 위한 영역
FROM gradle:latest
WORKDIR /app
COPY . .
RUN gradle clean test bootJar

# 배포한 패키지를 실행
#RUN java -jar -Dspring.profiles.active=test2 /app/build/libs/app.jar

# 외부 포트 오픈
EXPOSE 80

# 실행 명령어
#ENTRYPOINT [ "sleep", "infinity" ]
ENTRYPOINT [ "java", "-jar", "-Dspring.profiles.active=test2", "/App/build/libs/app.jar"]




