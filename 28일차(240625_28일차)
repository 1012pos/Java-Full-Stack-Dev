20240625
1. 스프링 URL 패턴 공부
- URL 제어
- URL 생성
- JSP 출력

2. 파라미터 전달(MODEL, REDIRECT)
- Redirect
- MODEL
- 

================
3. 앞으로는 context path는 /로 할 예정임
4. 앞으로 주소를 lh/로 하기 위해 아래의 단계를 거쳐야 함. 
- tomcat v9.0 -> ports에서 8080 -> 80로 수정
- 메모장 관리자모드로 켜기 C:\Windows\System32\drivers\etc -> 127.0.0.1 lh 로 수정
그다음 처음에 주소창에 http://lh/ 검색
5. 주소패턴 만들고, 리턴을 어디로 할거인가를 잘 생성해야 한다.
6. a 태그는 무조건 get메소드 형식
: a태그는 무조건 get 호출 방식
: <a href=""></a>
7. form 의 submit은 get이 기본이지만 post 방식 둘다 가능
8. 메소드의 리턴 타입이 보이드 일 경우 파일명으로 주소값을 찾아감, 파일명과 주소값이 같으면 파일명으로 주소값을 찾아줌
: http://lh/study/s1/url
9. 주소가 get방식, post방식 둘다 허용 가능하게 하는 방법
10. @RequestMapping는 메소드의 타입을 지정하지 않으면 다 가능, 다만 지정했을경우 그 지정된 메소드 형식으로 호출
11. http://lh/study/s1/data로 호출하는게 맞지만 data.jsp 파일이 없고, url.data파일이 있어서 http://lh/study/s1/url 경로로
호출한것임

12. @GetMapping("/")
: 주소 뒤에 /를 붙어야 한다.

13. 아래의 코드는 비슷한 개념이다.
- req.setAttribute("b", "나"); // 모든 요청에 대한 객체
- model.addAttribute("a", "가"); // model은 화면으로 데이터를 전달하기 위함으로 사용

14. 쿼리 스트링은 String 타입이다.(?a=가)
http://lh/s2/?a=가


15.(?a=가) 하면 화면에 쿼리스트링으로 입력한 값이 나온다 즉, 가 출력됨

16. 쿼리스트링을(?a=가) 값을 가지고 오고 싶으면 param이라는 개념을 알아야 한다.

17. RedirectAttributes 객체는 model.addAttribute에 적용한 것을 가지고 온다.

18. 아래의 코드처럼 했을때, 한글이 깨지는 경우 아래의 코드 추가 (방법 1)
// 데이터 요청 후 정보를 돌려 보내는 메소드
	@GetMapping("/data")
	public String data(RedirectAttributes ra) {
		
		ra.addAttribute("a", "다"); // 파라미터 방식 데이터 전달(GET으로 보내는 방식)
		ra.addFlashAttribute("b", "라"); // 1회성(POST으로 보내는 방식)
		return "redirect:/s2/";
	}
	
}

[코드 추가]
package app.config;

import java.io.IOException;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;

import org.springframework.web.filter.GenericFilterBean;

public class UTF8Filter extends GenericFilterBean {

	@Override
	public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {
		request.setCharacterEncoding("UTF-8");
		response.setCharacterEncoding("UTF-8");
		response.setContentType("text/html; charset=UTF-8");
		chain.doFilter(request, response);
	}

}

[코드 추가]
package app.config;

import javax.servlet.Filter;

import org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;


public class WebConfig extends AbstractAnnotationConfigDispatcherServletInitializer {

	@Override
	protected Class<?>[] getRootConfigClasses() {
		return new Class[] {MybatisConfig.class} ;  // 외부 설정 내용 등록 (Mybatis)
	}

	@Override
	protected Class<?>[] getServletConfigClasses() {
		return new Class[] {SpringConfig.class}; // 스프링 관련 설정 내용 등록
	}

	@Override
	protected String[] getServletMappings() {
		return new String[] {"/"};  // URL 패턴 등록
	}

	@Override
	protected Filter[] getServletFilters() {
		return new Filter[] {new UTF8Filter()};
	}
}

19. 리다이렉트는 내가 명시한 주소를 요청하는 것임

20. 아래의 코드처럼 했을때, 한글이 깨지는 경우 아래의 코드 추가 (방법 2)
@GetMapping("/data")
	public String data(RedirectAttributes ra, HttpServletRequest req) throws UnsupportedEncodingException {
		req.setCharacterEncoding("UTF-8");
		ra.addAttribute("a", "다"); // 파라미터 방식 데이터 전달(GET으로 보내는 방식)
		ra.addFlashAttribute("b", "라"); // 1회성(POST으로 보내는 방식)
		return "redirect:/s2/";
	}
}

21. 데이터 제어, 데이터 바인딩
- pom.xml에 아래의 코드가 있어야 한다.
<!-- Servlet -->
	<dependency>
		<groupId>javax.servlet</groupId>
		<artifactId>servlet-api</artifactId>
		<version>2.5</version>
		<scope>provided</scope>
	</dependency>
	<dependency>
		<groupId>javax.servlet.jsp</groupId>
		<artifactId>jsp-api</artifactId>
		<version>2.1</version>
		<scope>provided</scope>
	</dependency>
	<dependency>
		<groupId>javax.servlet</groupId>
		<artifactId>jstl</artifactId>
		<version>1.2</version>
	</dependency>

22. ${param.a}는 화면 출력용

23.model.addAttribute("c", 1); -> jsp 파일에서 ${c}로 작성해서 화면에 출력됨

24. 화면에서 제어
1. 반복문, 조건문 사용하면 되는데, 여기서 아래의 코드를 추가해야 한다.
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>

25. 표현식 안에는 계산 및 비교도 할 수 있다.
<c:if test="${ c + d == 6 }">
	<p>참</p>
</c:if>

26. String s = list.get(2); 이 코드와 아래의 코드는 같다.
: <p>${list[2]}</p>

27. <c:forEach items="${list}" var="s" >
	<p>${s}</p>
</c:forEach>

: var="s" s이부분이 반복되면서 데이터가 담기는 부분이다.

==============================
성민씨가 준 [testSpring 프로젝트]
- 마이바티스설정 수정 필요 -> MybatisConfig.java
주소 http://lh/TestSpring/list 로 호출 하면됨 포트 변경했기 때문에

질의사항
1. @GetMapping, @PostMapping 구분 이유?
: form 태그 안에 있는것의 메서드를 post로 작성을 해야하고, 다른거는 get으로 구현해도 됨 
2. detail 같은 경우 어떤건 @GetMapping? @PostMapping?
3. VieW

- TestSpringY 구현 순서
: new -> detail -> list
: 프로젝트 하나 생성해서 하기 / pom.xml쪽 수정해야함
: 기존에 있는걸 주석처리하면 오류가 발생하니, 프로젝트 새로 만들어서 구현하기


[코드 추가]
package app.config;

import java.io.IOException;

import javax.servlet.FilterChain;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;

import org.springframework.web.filter.GenericFilterBean;

public class UTF8Filter extends GenericFilterBean {

	@Override
	public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {
		request.setCharacterEncoding("UTF-8");
		response.setCharacterEncoding("UTF-8");
		response.setContentType("text/html; charset=UTF-8");
		chain.doFilter(request, response);
	}

}

[코드 추가]
package app.config;

import javax.servlet.Filter;

import org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer;


public class WebConfig extends AbstractAnnotationConfigDispatcherServletInitializer {

	@Override
	protected Class<?>[] getRootConfigClasses() {
		return new Class[] {MybatisConfig.class} ;  // 외부 설정 내용 등록 (Mybatis)
	}

	@Override
	protected Class<?>[] getServletConfigClasses() {
		return new Class[] {SpringConfig.class}; // 스프링 관련 설정 내용 등록
	}

	@Override
	protected String[] getServletMappings() {
		return new String[] {"/"};  // URL 패턴 등록
	}

	@Override
	protected Filter[] getServletFilters() {
		return new Filter[] {new UTF8Filter()};
	}
}

19. 리다이렉트는 내가 명시한 주소를 요청하는 것임

20. 아래의 코드처럼 했을때, 한글이 깨지는 경우 아래의 코드 추가 (방법 2)
@GetMapping("/data")
	public String data(RedirectAttributes ra, HttpServletRequest req) throws UnsupportedEncodingException {
		req.setCharacterEncoding("UTF-8");
		ra.addAttribute("a", "다"); // 파라미터 방식 데이터 전달(GET으로 보내는 방식)
		ra.addFlashAttribute("b", "라"); // 1회성(POST으로 보내는 방식)
		return "redirect:/s2/";
	}
}

21. 데이터 제어, 데이터 바인딩
- pom.xml에 아래의 코드가 있어야 한다.
<!-- Servlet -->
	<dependency>
		<groupId>javax.servlet</groupId>
		<artifactId>servlet-api</artifactId>
		<version>2.5</version>
		<scope>provided</scope>
	</dependency>
	<dependency>
		<groupId>javax.servlet.jsp</groupId>
		<artifactId>jsp-api</artifactId>
		<version>2.1</version>
		<scope>provided</scope>
	</dependency>
	<dependency>
		<groupId>javax.servlet</groupId>
		<artifactId>jstl</artifactId>
		<version>1.2</version>
	</dependency>

22. ${param.a}는 화면 출력용

23.model.addAttribute("c", 1); -> jsp 파일에서 ${c}로 작성해서 화면에 출력됨

24. 화면에서 제어
1. 반복문, 조건문 사용하면 되는데, 여기서 아래의 코드를 추가해야 한다.
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>

25. 표현식 안에는 계산 및 비교도 할 수 있다.
<c:if test="${ c + d == 6 }">
	<p>참</p>
</c:if>

26. String s = list.get(2); 이 코드와 아래의 코드는 같다.
: <p>${list[2]}</p>

27. <c:forEach items="${list}" var="s" >
	<p>${s}</p>
</c:forEach>

: var="s" s이부분이 반복되면서 데이터가 담기는 부분이다.


package app.study;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

@Controller
//@RequestMapping("/s1") // 아래의 메소드는 s1 아래의 주소라고 명시함, 그리고 s1은 클래스에 주는 주소다.
@RequestMapping("/study/s1") // 아래의 메소드는 s1 아래의 주소라고 명시함, 그리고 s1은 클래스에 주는 주소다.
public class Study01 {

	// RequestMapping 방식
//	@RequestMapping("/") // url >> /s1/
//	@RequestMapping("") // url >> /s1/ >> /s1
	@RequestMapping("/url") // url >> /s1/ >> /s1
//	public String url1() {
	public void url1() {
		System.out.println("기본 화면");
//		return "study/s1/url"; // 폴더와 파일명까지 작성해야 한다.
//		return "url"; // 폴더와 파일명까지 작성해야 한다.
	}
	
	// RequestMapping 특정 메소드 선택 방식
//	@RequestMapping(value = "/", method = RequestMethod.GET) // 하나의 주소로 인지함(http://lh/s1/)
//	@RequestMapping(value = "/", method = RequestMethod.POST) // 주소로 인지 못함(http://lh/s1/)
	@RequestMapping(value = "/s", method = RequestMethod.GET)
//	@RequestMapping(value = "/s", method = RequestMethod.POST)
	public void url2() {
		System.out.println("고정 메소드 처리");
	}
	
	// GetMapping 방식
	public void url3() {
		
	}
	
	// PostMapping 방식
	public void url4() {
		
	}
	
}



package app.study;

import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

@Controller
@RequestMapping("/s2")
public class Study02 {

	// 첫 화면 출력
	@GetMapping("/")
	public String page1(Model model, HttpServletRequest req) {
		String a = req.getParameter("a");
		String c = req.getParameter("c");
//		model.addAttribute("a", a);
//		req.setAttribute("b", "나");
//		req.setAttribute("c", "다");
		
		model.addAttribute("c", 1);
		model.addAttribute("d", 5);
		model.addAttribute("e", true);
		
		List<String> list = new ArrayList<String>();
		list.add("가");
		list.add("나");
		list.add("다");
		list.add("라");
		list.add("마");
		model.addAttribute("list", list);	
		
		String s = list.get(2);
		// s > "다"
		
		List<Integer> list2 = new ArrayList<Integer>();
		list2.add(1);
		list2.add(2);
		list2.add(3);
		list2.add(4);
		list2.add(5);
		list2.add(6);
		
		model.addAttribute("list2", list2);
		
		return "study/s2/page1";
	}
	
	// 데이터 요청 후 정보를 돌려 보내는 메소드
	@GetMapping("/data")
	public String data(RedirectAttributes ra, HttpServletRequest req) throws UnsupportedEncodingException {
		req.setCharacterEncoding("UTF-8");
		ra.addAttribute("a", "다"); // 파라미터 방식 데이터 전달(GET으로 보내는 방식)
		ra.addFlashAttribute("b", "라"); // 1회성(POST으로 보내는 방식)
		return "redirect:/s2/";
	}
	
}

<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>PAGE1</title>
</head>
<body>
<p>${param.a}</p>
<p>${param.c}</p>
<p>${a}</p>
<hr>
<p>${b}</p>

<hr>
<p>${ c + d }</p>
<p>${c}</p>
<p>${d}</p>

<c:if test="${ c + d == 6 }">
	<p>참</p>
</c:if>

<p>${e}</p>
<c:if test="${ e }">
	<p>참</p>
</c:if>
<hr>
<p>${list}</p>
<p>${list[2]}</p>

<c:forEach items="${list}" var="s" >
	<p>${s}</p>
</c:forEach>

<hr>

<c:if test="${ list2[2] == 3 }">
	<p>참</p>
</c:if>

<c:forEach items="${list2}" var="t">
	<p>${t}</p>
</c:forEach>

</body>
</html>



