20240524
1. 자바 언어는 객체 지향 프로그래밍(OOP) 이다.

2. C언어(순차 지향 언어) -> C++(순차 + 객체) -> 자바(객체)

3. 자바의 최상위는 object 이다.

4. 메소드
:  메소드는 코드를 재사용할 수 있게 하는 방법이다.
중복 코드 혹은 공통으로 사용 될 코드를 정의 할때 이용한다.
기능별 역할를 구분하기 위하여 사용 하기도 한다. 

4.1 메소드 형식 작성하기
1. 접근제어자 반환형 메소드명(전달값){
  명령문 ...
  명령문 ...
} 

2. 접근제어자 반환형 메소드명(전달값){
  명령문 ...
  명령문 ...
  return 반환값;
} 

5. 전달값 = 인자값 = 매개변수

6. 입력 = 호출

7. void = 리턴 없음

8. 반환형 자료형(기본형/참조형)을 작성한다. / 반환값은 자료형과 동일해야 한다.

9. public static void main(String[] args) {

	}

}

// 메인 메소드 static이 있으면 클래스가 되어 있는 상태에서 메모리에 할당되서 바로 실행된다.

10.  접근제어자가 private이면 클래스 안에서만 사용가능하다는 의미

11. 접근제어자를 사용하지 않으면, default 접근제어자가 디폴트이다.

12. 오버로딩
: 자료형(매개변수의 타입(int, String 등)) 및 전달값(매개변수)개수에 영향을 받는다.

형식
- 접근제어자 반환형 메소드명(전달값){ }
- 접근제어자 반환형 메소드명(전달값, 전달값){ }
- 접근제어자 반환형 메소드명(전달값, 전달값, 전달값){ }


13. 변수의 범위
- 전역변수 : 클래스 바로 아래에 작성 / 전역변수 = 인스턴스 변수
- 지역변수 : 제한적이다.

형식
- 전역변수 선언;
- 접근제어자 반환형 메소드명(전달값){
	지역변수 선언
 }
- 접근제어자 반환형 메소드명(전달값){
	전역 변수 사용 가능;
	지역변수 사용 불가;
 }

14. 










package java0524;

public class Study01 {

	public static void main(String[] args) {

		// 대입을 해서 값을 받아온다.
		// 메소드이름(전달값); 이부분이 입력이면서, 호출이다.
		// 출력 부분은 반환값
		
		int 값 = 합(1,2); // 3
		System.out.println(값);
		
		int 값1 = 빼기(1,2); // -1
		System.out.println(값1);
		
		int 값2 = 나누기(1,2); // 0
		System.out.println(값2);
		
		int 값3 = 곱하기(1,2); // 2
		System.out.println(값3);
		
	}
	
	// static 이 붙어야 메모리에 할당됨
	private static int 합(int a , int b) {
		return ( a + b );
	}
	
	static int 빼기(int a , int b) {
		return ( a - b );
	}
	
	static int 나누기(int a , int b) {
		return ( a / b );
	}
	
	static int 곱하기(int a , int b) {
		return ( a * b );
	}
	

}

package java0524;

public class Study02 {
	
	
	static int b = 0; // 전역변수

	public static void main(String[] args) {
		
		a();
		
	}
	
	static void a() {
		
		// 메소드를 이용한 재귀 반복문 (overflow 오류 : 자바가 실행하다가 멈춤)
		if(b < 5) {
			System.out.println("안녕!" + b);
			b++;
			a();
		}
		
	}
	

}


package java0524;

public class Study03 {

	public static void main(String[] args) {
		
		a(); // a()
		a(1); // a(int a)
		a(""); // a(String a)

	}
	// 오버로딩
    // 자료형(매개변수의 타입(int, String 등)) 및 전달값(매개변수)개수에 영향을 받는다.
	
	static void a() {
		
	}
	
	static void a(int a) {
			
	}

	static void a(String a) {
		
	}
	
	
	

}



package java0524;

public class Study04 {

	static int a = 0; // 전역변수
	static int c = 0; // 전역변수
	
	public static void main(String[] args) {

		System.out.println(a);
		int c = b();
		System.out.println(c);
	}
	
	static int b() {
		int c = 5; // 지역변수
	//	this.c = c; // 여기서는 사용 못하지만, class에서는 사용할수 있음 추후에 배울것임
		System.out.println(a);
		return c;
		
	}
	
}

package java0524;

public class Study05 {
	// 클래스에는 접근제어자가 필요하다. 기본적으로 public을 사용한다.
	// 클래스 안에 있는 메소드를 확인하고 싶으면 .을 사용한다.
	// 클래스에서 다른 클래스를 사용하고 싶으면 생성자를 new 키워드를 사용해서 생성하면 된다.
	public static void main(String[] args) {
		
		//new Study05_1(); // <-- 실행 또는 호출
		// 클래스에서 다른 클래스를 사용하고 싶으면 생성자를 new 키워드를 사용해서 생성한다.
		Study05_1 s51 = new Study05_1(1); 
		System.out.println(s51);
		s51.b();
	}

}
package java0524;

public class Study05_1 {
	
	// 전역변수, 이 클래스(Study05_1)에서만 사용하기 위해서 private 접근제어자를 사용한다.
	private int a;
	
	// 기본 생성자는 디폴트이다
	// 생성자(메소드랑 비슷하지만, 반환값이 없으면 생성자이다(void, int, String))
	// 기본 생성자 디폴트로 생성되지만, 매개변수를 수정해버리면 실행오류
	// 그렇기 때문에, 수정하고 싶으면 기본 생성자(매개변수가 없는)를 반드시 작성해야 한다. 
	
	Study05_1(){
		System.out.println(11111111);
	}
	
	Study05_1(int a){
		System.out.println(a);
		this.a = a; // this.a는 위에 있는 전역변수 int a;를 의미한다.
	}
	
	void b() {
		System.out.println(this.a);
	}
	
}



