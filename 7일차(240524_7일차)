20240524
1. 자바 언어는 객체 지향 프로그래밍(OOP) 이다.

2. C언어(순차 지향 언어) -> C++(순차 + 객체) -> 자바(객체)

3. 자바의 최상위는 object 이다. object는 어떤 자료형이든 모두 담을수 있다.

4. 메소드
:  메소드는 코드를 재사용할 수 있게 하는 방법이다.
중복 코드 혹은 공통으로 사용 될 코드를 정의 할때 이용한다.
기능별 역할를 구분하기 위하여 사용 하기도 한다. 

4.1 메소드 형식 작성하기
1. 접근제어자 반환형 메소드명(전달값){
  명령문 ...
  명령문 ...
} 

2. 접근제어자 반환형 메소드명(전달값){
  명령문 ...
  명령문 ...
  return 반환값;
} 

5. 전달값 = 인자값 = 매개변수

6. 입력 = 호출

7. void = 리턴 없음

8. 반환형 자료형(기본형/참조형)을 작성한다. / 반환값은 자료형과 동일해야 한다.

9. public static void main(String[] args) {

	}

}

// 메인 메소드 static이 있으면 클래스가 되어 있는 상태에서 메모리에 할당되서 바로 실행된다.

10.  접근제어자가 private이면 클래스 안에서만 사용가능하다는 의미

11. 접근제어자를 사용하지 않으면, default 접근제어자가 디폴트이다.

12. 오버로딩
: 자료형(매개변수의 타입(int, String 등)) 및 전달값(매개변수)개수에 영향을 받는다.

형식
- 접근제어자 반환형 메소드명(전달값){ }
- 접근제어자 반환형 메소드명(전달값, 전달값){ }
- 접근제어자 반환형 메소드명(전달값, 전달값, 전달값){ }


13. 변수의 범위
- 전역변수 : 클래스 바로 아래에 작성 / 전역변수 = 인스턴스 변수
- 지역변수 : 제한적이다.

형식
- 전역변수 선언;
- 접근제어자 반환형 메소드명(전달값){
	지역변수 선언
 }
- 접근제어자 반환형 메소드명(전달값){
	전역 변수 사용 가능;
	지역변수 사용 불가;
 }

14. 객체를 다루는 기술 / 시험(5/31),  문제는 1하나 코딩시험, 애플리케이션 만드는것임)
- 메소드(함수) 생성  및 사용 방식 / 입력(호출) / 출력(반환)
- 메소드를 이용해서 데이터를 처리하는 것을 만들면 된다.

15. 클래스
: 하나의 객체(Object)를 만들기 위한 변수와 메소드의 집합이다.
클래스는 일종의 어떤 형태를 만들기 위한 설계도와 같다.
new 키워드를 이용하여 생성된 인스턴스 주소값을 변수 값으로 참조한다.
생성된 인스턴스 주소값은  Heap area(힙 영역)의 주소값과 같다.

- 클래스에는 접근제어자가 필요하다. 기본적으로 public을 사용한다.
- 클래스 안에 있는 메소드를 확인하고 싶으면 .을 사용한다.
- 클래스에서 다른 클래스를 사용하고 싶으면 생성자를 new 키워드를 사용해서 생성하면 된다.
- new Study05_1(); // <-- 실행 또는 호출
- 클래스에서 다른 클래스를 사용하고 싶으면 생성자를 new 키워드를 사용해서 생성한다.

17. 생성자
기본 생성자는 디폴트이다
생성자(메소드랑 비슷하지만, 반환값이 없으면 생성자이다(void, int, String))
기본 생성자 디폴트로 생성되지만, 매개변수를 수정해버리면 실행오류
그렇기 때문에, 수정하고 싶으면, 기본 생성자(매개변수가 없는)를 반드시 작성해야 한다. 
- 전역변수, 이 클래스(Study05_1)에서만 사용하기 위해서 private 접근제어자를 사용한다.
- this.a는 위에 있는 전역변수 int a;를 의미한다.

18. 주석
: ctrl + /
: ctrl + shift + c  

19. 객체를 다루기 위해서 두가지를 학습하자!
- 메서드 -> 함수형 : 호출(입력) ----> 반환(출력)
- 클래스 -> 객체형 : 생성자(인스턴스) -----> 객체를 받는다.

20. mariaDB 설치 및 HeidiSQL 설치

21. 내 깃허브 주소 : https://github.com/1012pos

22. HeidiSQL에서 edu라는 데이터베이스 새로 만들기
아이디 : YoonShin
비밀번호 : 1234

23. new Study06_1().함수(); // new 키워드를 사용하지 않고 메소드 실행하기
    static 키워드 생각하기(new 키워드 없이 메모리에 생성되게 하는 키워드는 static이다.)
    사용방법은 Study06_2.함수(); 이다.

24. extends : 클래스 / public class Study07 extends Study07_1
     implements : 인터페이스

25. 메인메소드(여기에 static이 있음) 때문에 여기서 메서드 앞에 static을 작성함
만약 메인메소드가 아니었다면 static을 작성하지 않아도 사용할 수있다.
보통 메인메소드에서 상속받지 않는다. 이유는 static 때문이다.

26. 추상
: 이름만 정의한것을 추상이라고 생각하기

27. 상속

28. 메인메서드에서 생성자를 사용하는 방법 new 키워드를 사용해서 생성자를 생성한다.

29. new를 사용해서 생성자를 만들고, 참조변수를 사용해서 참조변수.메서드를 이용해서 사용한다.
ex) Study08_2 s8 = new Study08_2();
     s8.함수();
     s8.함수2();

30. new를 사용해서 객체를 생성 한다는 의미는 new를 사용해서 생성자를 생성한다라는 말과 같은것 같음(내생각)

31. 클래스를 가지고 와서 사용하려면 new 키워드 필요하다.


package java0524;

public class Study01 {

	public static void main(String[] args) {

		// 대입을 해서 값을 받아온다.
		// 메소드이름(전달값); 이부분이 입력이면서, 호출이다.
		// 출력 부분은 반환값
		
		int 값 = 합(1,2); // 3
		System.out.println(값);
		
		int 값1 = 빼기(1,2); // -1
		System.out.println(값1);
		
		int 값2 = 나누기(1,2); // 0
		System.out.println(값2);
		
		int 값3 = 곱하기(1,2); // 2
		System.out.println(값3);
		
	}
	
	// static 이 붙어야 메모리에 할당됨
	private static int 합(int a , int b) {
		return ( a + b );
	}
	
	static int 빼기(int a , int b) {
		return ( a - b );
	}
	
	static int 나누기(int a , int b) {
		return ( a / b );
	}
	
	static int 곱하기(int a , int b) {
		return ( a * b );
	}
	

}

package java0524;

public class Study02 {
	
	
	static int b = 0; // 전역변수

	public static void main(String[] args) {
		
		a();
		
	}
	
	static void a() {
		
		// 메소드를 이용한 재귀 반복문 (overflow 오류 : 자바가 실행하다가 멈춤)
		if(b < 5) {
			System.out.println("안녕!" + b);
			b++;
			a();
		}
		
	}
	

}


package java0524;

public class Study03 {

	public static void main(String[] args) {
		
		a(); // a()
		a(1); // a(int a)
		a(""); // a(String a)

	}
	// 오버로딩
    // 자료형(매개변수의 타입(int, String 등)) 및 전달값(매개변수)개수에 영향을 받는다.
	
	static void a() {
		
	}
	
	static void a(int a) {
			
	}

	static void a(String a) {
		
	}
	
	
	

}



package java0524;

public class Study04 {

	static int a = 0; // 전역변수
	static int c = 0; // 전역변수
	
	public static void main(String[] args) {

		System.out.println(a);
		int c = b();
		System.out.println(c);
	}
	
	static int b() {
		int c = 5; // 지역변수
	//	this.c = c; // 여기서는 사용 못하지만, class에서는 사용할수 있음 추후에 배울것임
		System.out.println(a);
		return c;
		
	}
	
}

package java0524;

public class Study05 {
	// 클래스에는 접근제어자가 필요하다. 기본적으로 public을 사용한다.
	// 클래스 안에 있는 메소드를 확인하고 싶으면 .을 사용한다.
	// 클래스에서 다른 클래스를 사용하고 싶으면 생성자를 new 키워드를 사용해서 생성하면 된다.
	public static void main(String[] args) {
		
		//new Study05_1(); // <-- 실행 또는 호출
		// 클래스에서 다른 클래스를 사용하고 싶으면 생성자를 new 키워드를 사용해서 생성한다.
		Study05_1 s51 = new Study05_1(1); 
		System.out.println(s51);
		s51.b();
		
//		Study05_2 s52 = new Study05_2(3);
//		s52.c();
		
	}

}

package java0524;

public class Study05_1 {
	
	// 전역변수, 이 클래스(Study05_1)에서만 사용하기 위해서 private 접근제어자를 사용한다.
	private int a;
	
	// 기본 생성자는 디폴트이다
	// 생성자(메소드랑 비슷하지만, 반환값이 없으면 생성자이다(void, int, String))
	// 기본 생성자 디폴트로 생성되지만, 매개변수를 수정해버리면 실행오류
	// 그렇기 때문에, 수정하고 싶으면 기본 생성자(매개변수가 없는)를 반드시 작성해야 한다. 
	
	Study05_1(){
		System.out.println(11111111);
	}
	
	Study05_1(int a){
		System.out.println(a);
		this.a = a; // this.a는 위에 있는 전역변수 int a;를 의미한다.
	}
	
	void b() {
		System.out.println(this.a);
	}
	
}

package java0524;

public class Study05_2 {
	
	//전역변수
	int d;
	
	Study05_2(){
		System.out.println("기본 생성자");
	}
	
	Study05_2(int d){
		System.out.println("매개변수(전달값이) 하나가 있는 생성자 " + d);
		this.d = d; // this.d는 int d의 값인 전역변수를 의미한다.
	}
	
	void c(){
		System.out.println(this.d);
	}

	
	
}

package java0524;

public class Study06 {

	public static void main(String[] args) {

		new Study06_1().함수();
		// new Study06_1().함수(); // new 키워드를 사용하지 않고 메소드 실행하기
		// static 키워드 생각하기(new 키워드 없이 메모리에 생성되게 하는 키워드는 static이다.)
		Study06_2.함수(); 
		System.out.println(Study06_2.a);
	}

}


package java0524;

public class Study06_1 {

	void 함수() {
		
	}
	
}


package java0524;

public class Study06_2 {
	
	 // static 키워드를 사용하면 new 키워드를 사용해서 새로 생성하지 않고 사용할 수 있다.
	 static int a = 10;

	 static void 함수() {
		
	}
	
}


package java0524;

public class Study07{

	public static void main(String[] args) {

	Study07_2 a= new Study07_2();
	
	a.함수();
	}

}


package java0524;

public abstract class Study07_1 {

	// 메인메소드(여기에 static이 있음) 때문에 여기서 메서드 앞에 static을 작성함
	// 만약 메인메소드가 아니었다면 static을 작성하지 않아도 사용할 수있다.
	// 보통 메인메소드에서 상속받지 않는다. 이유는 static 때문이다.
	
	void 함수() {
		System.out.println("함수");
	}
	
	// 클래스에서 추상 메서드를 사용하려면 클래스 앞이랑 메서드 앞에 abstract 키워드를 사용한다.
	abstract void 함수2(); // 추상적이기 때문에, 자식이 상속을 받았을 경우 재정의 해줘야 한다.
	
	
}

package java0524;

public class Study07_2 extends Study07_1 {

	// 여기에는 static이 없는 메서드이기 때문에
	// static을 작성하지 않아도 된다.
	void 호출() {
		함수();
	}
	
	
	void 함수() { // <- 이부분을 재구성 하였기 때문에 오버라이드이다.
		System.out.println("함수1111");
	}
	
	
	@Override // 오버라이드는 메서드 재정의를 의미한다.
	void 함수2() {
		
	}
	
	void 함수2(int a) { // <-이부분은 오버러드 개념 적용됨
		
	}
	
}

package java0524;

public class Study08 {

	public static void main(String[] args) {

		//Study08_2 s8 = new Study08_2(5);
		Study08_2 s8 = new Study08_2();
		s8.함수();
		s8.함수2();
		
	}

}


package java0524;

public class Study08_1 {

	
	Study08_1(){}
	Study08_1(int a){this.a = a;}
	
	int a;
	
	void 함수() {
		System.out.println(a);
	}
	
}


package java0524;

public class Study08_2 extends Study08_1 {

	int a;
	
	// Study08_2()는 자식의 생성자이다.
	// super(4)는 생성자 안에서만 사용가능하다. 메서드 안에서는 사용 불가하다.
	Study08_2(){super(4);} 
	
	Study08_2(int a){
		// super 키워드는 부모의 전역변수를 사용하기 위한 키워드
		// super 키워드는 부모에 있는 전역변수(인스턴스 변수)를 사용하기 위함
		super.a = a; 
	}
	
	void 함수2() {
		//System.out.println(a); // 자식의 a의 값을 출력 // 0출력
		//System.out.println(super.a); // 부모의 a를 출력하기 위함 // 5출력
	}
	
	
	
}


package java0524;

public class Study09 {

	public static void main(String[] args) {

		//new Study09_1().구구단(3,6); // 객체로 접근해서 메서드 실행
		new Study09_1(3,6); // 생성자로 실행
	}
	
}


package java0524;

public class Study09_1 {
	
//	void 구구단(int a, int b) { // 메서드 실행
//		단(a,b);
//	}
	
	Study09_1(int a, int b) { // 생성자로 실행
		단(a,b);
	}
	
	
	private void 단(int a, int b) { 
		for(; a<=b; a++) {
			System.out.println(a+ " 단");
			계산(a);
		}
		
	}
	
	private void 계산(int a) {
		for(int i =1; i<=9; i++) {
			System.out.println(a + " * " + i + " = " + (a * i));
		}
		System.out.println();
	}
}




