20240801
1. https://mariadb.com/kb/en/create-function/ 참조

2. SQL에서 직접 함수를 만들수도 있고, 내장된 함수를 사용할 수 도 있다.
직접 만들때는(사용자 함수) 보편적으로 f를 사용해서 명시한다.

3. DELIMITER(MariaDB 문법)
: 여러줄의 SQL문을 합쳐줄수 있다.

4. 사용자 함수란, 직접 본인이 함수를 만들어서 사용하는 함수
-- 전체 수를 구하는 사용자 함수(대상 테이블은 t_menu)
DELIMITER $$
CREATE FUNCTION f_event1() RETURNS INT
BEGIN
	DECLARE f_out int;
	SELECT COUNT(가격) INTO f_out FROM t_menu;
	RETURN f_out;
END;
$$
DELIMITER ;

5. https://mariadb.com/kb/en/create-procedure/

6. PROCEDURE

7. SET은 값을 넣어준다는 의미

8. PROCEDURE
: PROCEDURE로 만든다음, CALL을 이용해서 만든 함수를 호출한다.
delimiter $$
CREATE FUNCTION f_event5(IN f_a BOOLEAN) RETURNS VARCHAR(20)
	BEGIN
		DECLARE f_return VARCHAR(20);
		if(f_a = 0) then
		SET f_return = '불가능';
		ELSE 
		SET f_return = '가능';
		END if;
		RETURN f_return;
	END;
$$
delimiter ;

-- 프로시저
CREATE OR REPLACE PROCEDURE p_event1()
SELECT *, f_event5(양조절유무) AS 한글양조절유무 FROM t_menu;

CALL p_event1();

CREATE PROCEDURE p_event2(IN a INT, IN b INT, OUT c INT)
SET c = a + b;


CALL p_event2(4, 3, @r);
SELECT @r;

9. 묶어서 쓸때 delimiter $$, BEGIN, END 사용

10. p_u_i_s
: insert 후, select 를 줄인말 (강사님이 줄여서 쓰심)

11. -- 프로시저를 이용하여 u 테이블에 데이터를 입력하기
delimiter $$
CREATE PROCEDURE p_u_insert(IN p_nm VARCHAR(10), IN p_gender BOOLEAN, OUT state INT)
BEGIN
	INSERT INTO u VALUES (p_nm, p_gender);
	SET state = 1;
END;
$$
delimiter ;

CALL p_u_insert('이순신', FALSE, @state);

SELECT @state;

: 여기서 OUT의 의미는 내보낸다는 의미로 사용된다.

12. 프로시저
프로시저란 SQL Server에서 제공하는 프로그래밍 기능입니다.
쿼리문을 마치 하나의 메서드 형식으로 만들고 어떠한 동작을 일괄적으로 처리하는 용도로 사용됩니다.
여러 개의 칼럼을 조회하고 여러 개의 테이블을 조인하고 거기에 조건까지 넣어줌으로써 하나의 쿼리를 만드는데
엄청나게 긴 쿼리문이 생기게 됩니다.
이러한 여러개의 쿼리를 사용할 때마다 긴 쿼리문을 써야 한다면 엄청나게 불편할 텐데 이를 프로시저에 저장하고
저장된 프로시저를 호출하여 프로그래밍을 하는것이 훨씬 효율적입니다.


13. 






USE edu;

SELECT * FROM t_menu;

SELECT 종류, SUM(가격) AS 합 FROM t_menu GROUP BY 종류;

-- DROP FUNCTION f_event1;

-- 전체 수를 구하는 사용자 함수(대상 테이블은 t_menu)
DELIMITER $$
CREATE FUNCTION f_event1() RETURNS INT
BEGIN
	DECLARE f_out int;
	SELECT COUNT(가격) INTO f_out FROM t_menu;
	RETURN f_out;
END;
$$
DELIMITER ;

SELECT f_event1();
SELECT COUNT(가격) FROM t_menu;

-- 두개의 수를 받아서 합한 수를 받는 사용자 함수
CREATE FUNCTION f_event2(IN a INT, IN b INT) RETURNS INT
RETURN(a + b);


SELECT f_event2(2,5);


-- 성별 데이터를 시각화 하기 위해서 변경 해주는 사용자 함수
CREATE TABLE u (
	nm VARCHAR(10),
	gender BOOLEAN
);

INSERT INTO u VALUES ('홍길동', 1);
INSERT INTO u VALUES ('류관순', 0);

COMMIT;


delimiter $$
CREATE FUNCTION f_event3(IN f_gender BOOLEAN) RETURNS VARCHAR(20)
BEGIN
	DECLARE r_gender VARCHAR(20);
	if(f_gender = 0) then
		RETURN '여성';
	ELSE
		RETURN '남성';
	END if;
END;
$$
delimiter ;

SELECT nm, gender, f_event3(gender) FROM u;

-- 날짜 함수 다루기
SELECT NOW(), DATE_FORMAT(NOW(), '%Y년%m월%d일') AS 한국식날짜;

SELECT f_event4(NOW()) AS 현재날짜, 
       f_event4(STR_TO_DATE('2023-07-29', '%Y-%m-%d')) AS 작년날짜,
       f_event4(STR_TO_DATE('2024-06-09', '%Y-%m-%d')) AS 지난달날짜;

CREATE FUNCTION f_event4(IN f_date datetime) RETURNS VARCHAR(30)
RETURN DATE_FORMAT(f_date, '%Y년%m월%d일');


delimiter $$
CREATE FUNCTION f_event5(IN f_a BOOLEAN) RETURNS VARCHAR(20)
	BEGIN
		DECLARE f_return VARCHAR(20);
		if(f_a = 0) then
		SET f_return = '불가능';
		ELSE 
		SET f_return = '가능';
		END if;
		RETURN f_return;
	END;
$$
delimiter ;

-- 프로시저
CREATE OR REPLACE PROCEDURE p_event1()
SELECT *, f_event5(양조절유무) AS 한글양조절유무 FROM t_menu;

CALL p_event1();

CREATE PROCEDURE p_event2(IN a INT, IN b INT, OUT c INT)
SET c = a + b;


CALL p_event2(4, 3, @r);
SELECT @r;

-- 프로시저를 이용하여 u 테이블에 데이터를 입력하기
delimiter $$
CREATE PROCEDURE p_u_insert(IN p_nm VARCHAR(10), IN p_gender BOOLEAN, OUT state INT)
BEGIN
	INSERT INTO u VALUES (p_nm, p_gender);
	SET state = 1;
END;
$$
delimiter ;

CALL p_u_insert('이순신', FALSE, @state);

SELECT @state;

-- 입력된 정보 내역을 리턴 받기
delimiter $$
CREATE PROCEDURE p_u_i_s(IN p_nm VARCHAR(10), IN p_gender BOOLEAN)
BEGIN
	INSERT INTO u VALUES (p_nm, p_gender);
	SELECT * FROM u;
END;
$$
delimiter ;

CALL p_u_i_s('둘리', TRUE);

-- u2 테이블에 데이터를 입력 후 해당 데이터의 식별자인 기본키 값을 받아오기
CREATE TABLE u2(
	no INT NOT NULL NOT NULL AUTO_INCREMENT PRIMARY KEY,
	nm VARCHAR(50) NOT NULL,
	gender boolean
);

SELECT * FROM u2;

delimiter $$
CREATE PROCEDURE p_u2(IN p_nm VARCHAR(50), IN p_gender BOOLEAN, OUT p_no INT)
BEGIN 
    INSERT INTO u2 (nm, gender) VALUES (p_nm, p_gender);
    SELECT LAST_INSERT_ID() INTO p_no;
    COMMIT;
END;
$$
delimiter ;

CALL p_u2('참치', TRUE, @NO);
SELECT @NO;
