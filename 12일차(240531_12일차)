20240531
1. 항상 DB 연결후, 데이터가 잘 들어가고, 변경되고, 삭제되었는지 항상 확인하기

2. scanner 사용시에는 실행 후 무조건 한번씩 끄기

3. 컬럼 데이터 타입이 날짜인 case도 연습해보기
: 날짜는 포맷이 있음(어렵다고 하심)

4. 논리형(Boolean)으로 자료를 다룰때는 get이 아닌, is로 사용한다는 것을 알아야한다.

5. 보기 편하게 메소드 접고 시작, 화면도 2개로 구분지어서 바로 바로 확인가능하게 하는게 편함.

6. 테이블 생성시 int형과 같이 boolean도 자료형 크기 작성할 필요 없음

7. 테이블 생성시 OR Replace 작성되어 있지면, 테이블생성 호출되는 부분 주석처리 안해도 된다.

8. 데이터 입력시 개수가 1개이상이니깐, List list =  new ArrayList<>(); 작성해야한다.

9. 
		List list = new ArrayList<DbTable>();
		
		data.setNo(1);
		data.setEmail("홍길동@이메일.컴");
		data.setPassword("pAssWord");
		data.setDelYn(false);
		list.add(data);
		
		data = new DbTable();        <- 매번 다르기 때문에 new 생성 필요
		data.setNo(2);
		data.setEmail("유관순@이메일.컴");
		data.setPassword("1@34%");
		data.setDelYn(true);
		list.add(data); 

10. 강사님이 다른 방법으로 코드 작성한 부분 복습하기(패키지 test3)

11. while문에서는 컬럼을 가지고 오는거임

package java0531_1;

public class App {

	/****************************************************************
	 * 문제) AppController 클래스에 있는 5단계의 메소드 기능을 넣고 요청한 동작이 되도록 코드를 작성하시오.
	 * 단, 각 단계에서 데이터를 제어하시오. (예시 : Scanner를 이용하여 데이터 입력방식도 가능)
	 *
	 * 1단계 : 테이블 정의서를 보고 생성하시오.
	 *
	 * 2단계 : 사용자 정보를 입력 받아 테이블에 추가하시오.
	 *
	 * 3단계 : 입력된 데이터를 전체 출력하시오.
	 *
	 * 4단계 : 수정할 데이터의 번호를 입력 받아 수정하시오.
	 *
	 * 5단계 : 삭제할 데이터의 번호를 입력 받아 삭제하시오.
	 ***************************************************************/

	// 현재 로컬에 설치 되어 있는 데이터베이스 접속 정보를 입력하세요.
	private final static String URL = "jdbc:mariadb://localhost:3306/edu";
	private final static String USER = "root";
	private final static String PASSWORD = "1234";
	/****************************************************************/

	public static void main(String[] args) {
		new AppController().시작(URL, USER, PASSWORD);
	}

}

package java0531_1;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class AppController {
	
	private Scanner scan;
	private String name;
	private DBConnection db;
	private String sql;
	
	public AppController() {
		this.scan = new Scanner(System.in);
		this.db = new DBConnection();
	}

	/****************************************************************/
	// 1단계 테이블 생성하기
	private void 테이블생성(Connection conn) {
		sql = "create table "
	            + " food ("
				+ " no 		 int,"
				+ " menu 	 varchar(70),"
				+ " type 	 varchar(60),"
				+ " price	 int,"
				+ " delYn 	 boolean"
				+ " )"; // DDL 추가
		System.out.println("테이블 생성 SQL문 확인 : " + sql);
		// 코드추가를 확인 후 아래의 주석을 풀고 실행하세요.		
		db.테이블생성(conn, sql);
	}
	
	// 2단계 생성된 테이블에 데이터 입력하기
	private void 입력하기(Connection conn) {
		sql = "insert into food value (?,?,?,?,?)"; // DML 추가
		System.out.println("SQL문 확인 : " + sql);
		DbTable data = new DbTable();
		/*****************************************
		 *  Scanner 사용시 추가
		 *****************************************/
		// Scanner로 한 경우
		data.setNo(scan.nextInt());
		scan.nextLine();
		data.setMenu(scan.nextLine());
		data.setType(scan.nextLine());
		data.setPrice(scan.nextInt());
		scan.nextLine();
		data.setDelYn(scan.nextBoolean());
		scan.nextLine();
		
		System.out.println(data);
		// 코드추가를 확인 후 아래의 주석을 풀고 실행하세요.
		db.데이터입력하기(conn, sql, data);
		
		
//		// 데이터를 때려 박은 경우
//		List list = new ArrayList<DbTable>();
//		
//		data.setNo(1);
//		data.setMenu("파스타");
//		data.setType("이탈리안");
//		data.setPrice(15000);
//		data.setDelYn(false);
//		list.add(data);
//		
//		data = new DbTable();
//		data.setNo(2);
//		data.setMenu("국밥");
//		data.setType("코리안");
//		data.setPrice(12000);
//		data.setDelYn(true);
//		list.add(data);
//		
//		data = new DbTable();
//		data.setNo(3);
//		data.setMenu("초밥");
//		data.setType("재패니즈");
//		data.setPrice(25000);
//		data.setDelYn(false);
//		list.add(data);
//		
//		data = new DbTable();
//		data.setNo(4);
//		data.setMenu("마라탕");
//		data.setType("중식");
//		data.setPrice(20000);
//		data.setDelYn(true);
//		list.add(data);
//		
//		data = new DbTable();
//		data.setNo(5);
//		data.setMenu("타고");
//		data.setType("멕시칸");
//		data.setPrice(8000);
//		data.setDelYn(false);
//		list.add(data);
//		
//		for(int i = 0; i < list.size(); i++) {
//			data = (DbTable)list.get(i);
//			System.out.println(data);
//			// 코드추가를 확인 후 아래의 주석을 풀고 실행하세요.
//			db.데이터입력하기(conn, sql, data);
//		}
//		
		
	}
	
	// 3단계 생성된 데이터 가져오기 >> 목록 출력 시 화면출력() 메소드를 사용하시오.
	private void 가져오기(Connection conn) {
		sql = "select * from food"; // DML 추가
		System.out.println("SQL문 확인 : " + sql);
		화면출력(db.데이터가져오기(conn, sql));
	}
	
	// 4단계 생성된 데이터 수정하기
	private void 수정하기(Connection conn) {
		sql = "update food set price = ? where no = ?"; // DML 추가
		System.out.println("SQL문 확인 : " + sql);
		DbTable data = new DbTable();
		/*****************************************
		 *  Scanner 사용시 추가
		 *****************************************/
		
		// Scanner로 한 경우
		data.setPrice(scan.nextInt());
		scan.nextLine();
		data.setNo(scan.nextInt());
		scan.nextLine();
		
		// 데이터를 때려 박은 경우
//		data.setNo(3);
//		data.setPrice(10000);
		
		System.out.println(data);
		// 코드추가를 확인 후 아래의 주석을 풀고 실행하세요.
		db.데이터수정하기(conn, sql, data);
	}
	
	// 5단계 생성된 데이터 삭제하기
	private void 삭제하기(Connection conn) {
		sql = "update food set delYn = ? where no = ?"; // DML 추가
		System.out.println("SQL문 확인 : " + sql);
		DbTable data = new DbTable();
		
		/*****************************************
		 *  Scanner 사용시 추가
		 *****************************************/

		// Scanner로 한 경우
		data.setDelYn(scan.nextBoolean());
		scan.nextLine();
		data.setNo(scan.nextInt());
		scan.nextLine();
		
		
//		// 데이터를 때려 박은 경우
//		data.setNo(4);
//		data.setDelYn(false);

	
		System.out.println(data);
		// 코드추가를 확인 후 아래의 주석을 풀고 실행하세요.
		db.데이터삭제하기(conn, sql, data);
	}
	/****************************************************************/
	
	private void 사용자() {
		System.out.println("당신은 누구인가요?");
		this.name = scan.nextLine();
		System.out.println(this.name + "님 환영합니다.");
	}
	
	private void 종료() {
		System.out.println(this.name + "님 다음에 또 찾아주세요.");
		scan.close();
	}
	
	private void 화면출력(List<DbTable> list) {
		for(int i = 0; i < list.size(); i++) {
			DbTable data = list.get(i);
			System.out.println(data);
		}
	}
	
	private boolean 디비접속() {
		boolean result = false;
		boolean key = true;
		System.out.println("데이터베이스에 연결하시겠습니까?(Y/N)");
		while(key) {
			switch (scan.nextLine()) {
				case "Y":
				case "y":
					result = true;
				case "N":
				case "n":
					key = false;
					break;
				default:
					System.out.println("잘못 입력하셨습니다.");
					break;
			}
		}
		return result;
	}
	
	public void 시작(String URL, String USER, String PASSWORD) {
		사용자();
		if(디비접속()) {
			try {
				Connection conn = db.openDB(URL, USER, PASSWORD);
				if(conn != null) {
					//테이블생성(conn);					
					boolean key = true;
					while(key) {
						System.out.println("어떤 기능을 실행하시겠습니까?(C입력/R읽기/U수정/D삭제/E종료");
						switch (scan.nextLine()) {
							case "C": 
							case "c":
								입력하기(conn);
								break;
							case "R": 
							case "r":
								가져오기(conn);
								break;
							case "U": 
							case "u":
								수정하기(conn);
								break;
							case "D": 
							case "d":
								삭제하기(conn);
								break;
							case "E": 
							case "e":
								key = false;
								break;
							default:
								System.out.println("잘못된 입력입니다. 다시 기능을 입력해주세요.");
						}
					}
					conn.close();
					종료();
				} else {
					System.out.println("데이터 접속 정보를 확인해 주세요.");
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
		} else {
			종료();
		}
	}

}

package java0531_1;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class DBConnection {

	private PreparedStatement pstmt = null;
	private ResultSet rs = null;

	public Connection openDB(String URL, String USER, String PASSWORD) {
		try {
			Class.forName("org.mariadb.jdbc.Driver");
			System.out.println("JDBC Connection Open!");
			return DriverManager.getConnection(URL, USER, PASSWORD);
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}

	public boolean 테이블생성(Connection conn, String sql) {
		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.execute();
			pstmt.close();
			return true;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return false;
	}

	public List<DbTable> 데이터가져오기(Connection conn, String sql) {
		List<DbTable> list = new ArrayList<DbTable>();
		DbTable data;
		try {
			pstmt = conn.prepareStatement(sql);
			rs = pstmt.executeQuery();
			while(rs.next()){
				data = new DbTable();

				// 데이터를 매핑하시오.
				data.setNo(rs.getInt("no"));
				data.setMenu(rs.getString("menu"));
				data.setType(rs.getString("type"));
				data.setPrice(rs.getInt("price"));
				data.setDelYn(rs.getBoolean("delYn"));
				list.add(data);
			}
			rs.close();
			pstmt.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return list;
	}

	public boolean 데이터입력하기(Connection conn, String sql, DbTable data) {
		try {
			pstmt = conn.prepareStatement(sql);

			// 데이터를 매핑하시오.
			pstmt.setInt(1, data.getNo());
			pstmt.setString(2, data.getMenu());
			pstmt.setString(3, data.getType());
			pstmt.setInt(4, data.getPrice());
			pstmt.setBoolean(5, data.isDelYn());

			int state = pstmt.executeUpdate();
			pstmt.close();
			conn.commit();
			if(state == 1) return true;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return false;
	}

	public boolean 데이터수정하기(Connection conn, String sql, DbTable data) {
		try {
			pstmt = conn.prepareStatement(sql);

			// 데이터를 매핑하시오.
			pstmt.setInt(2, data.getNo());
			pstmt.setInt(1, data.getPrice());

			int state = pstmt.executeUpdate();
			pstmt.close();
			conn.commit();
			if(state == 1) return true;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return false;

	}

	public boolean 데이터삭제하기(Connection conn, String sql, DbTable data) {
		try {
			pstmt = conn.prepareStatement(sql);

			// 데이터를 매핑하시오.
			pstmt.setInt(2, data.getNo());
			pstmt.setBoolean(1, data.isDelYn());

			int state = pstmt.executeUpdate();
			pstmt.close();
			conn.commit();
			if(state == 1) return true;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return false;

	}

}

package java0531_1;

public class DbTable {

	// 테이블 정의서를 보고 필드(변수)를 선언하시오.
	
	private int no;
	private String menu;
	private String type;
	private int price;
	private boolean delYn;
	
	public int getNo() {
		return no;
	}
	public void setNo(int no) {
		this.no = no;
	}
	public String getMenu() {
		return menu;
	}
	public void setMenu(String menu) {
		this.menu = menu;
	}
	public String getType() {
		return type;
	}
	public void setType(String type) {
		this.type = type;
	}
	public int getPrice() {
		return price;
	}
	public void setPrice(int price) {
		this.price = price;
	}
	public boolean isDelYn() {
		return delYn;
	}
	public void setDelYn(boolean delYn) {
		this.delYn = delYn;
	}
	
	
	@Override
	public String toString() {
		return "DbTable [no=" + no + ", menu=" + menu + ", type=" + type + ", price=" + price + ", delYn=" + delYn
				+ "]";
	}
	

}

