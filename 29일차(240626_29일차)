20240626
※ 항상 Properties -> Context root : / 확인하기
[JSTL 데이터 제어하기]
- 화면과 컨트롤
1. 화면 출력
- jsp 파일에서 조건문1, 조건문2, 반복문을 사용한다.

2. jsp에서 변수를 선언 및 할당을 하는 경우는 드물다 하지만 선언 및 할당을 하는게 우선순위가 가장 높다.
<c:set scope="request" var="a" value="${key}" />

3. key라는 이름으로 값을 가지고 오고 싶으면 value="${key}" 작성한다.

4. String a  = req.getParameter("a"); // 이것만 작성하면 화면에서 ${param.a}로 하면 출력 가능하다.

5. 아래의 코드의 변수명은 겹치면 안된다.
<c:forEach var="row1" begin="${s}" end="${e}" step="1" varStatus="s1">
	<ul>
	<c:forEach var="row2" begin="${s}" end="${e}" step="1" varStatus="s2">
		<li>${row1} * ${row2} = ${row1 * row2}</li>
	</c:forEach>
	</ul>
</c:forEach>


6. <ul>
	<c:forEach var="row" begin="${s}" end="${e}" step="1" varStatus="s">
		<li>${row} * ${s.index} = ${row * s.index}</li>
	</c:forEach>
</ul>
: var에서 row는 begin과 연관되어 있다.
: s.index는 varStatus 와 연관되어 있다.
: varStatus의 변수명이 s일 경우 s.index, s.count 따라서 index, count와 연관이 있다.
 
[경로 변수 이용하여 페이지 출력하기]
1. 주소로 사용한것은 다 String이다.

2. @PathVariable의 아래와 같이 3개의 변수들에 영향을 미치고, 작성하지 않으면 아래의 변수명에 따라 주소를 읽어 온다.
- name
- value(name이 없을때, 변수명을 지정안했을때, 값이아니라, 변수명이됨)
- required
(name = "page", value = "page", required = true)

3. @PathVariable(name = "page", value = "page", required = true)
- name, value를 같이 사용할 수 없다.
// name = 경로 변수명 지정
// value = 기본 경로 변수명 지정
// required = 기본은 true > false (경로 주소가 2개 이상이여야 한다.)



[강사님 업데이트 코드 확인 방법]
- src/main에서 "파일명 클릭하기"
: + 는 신규
: . 은 기존파일 부분 수정

[Spring Framework]
: https://docs.spring.io/spring-framework/docs/5.3.37/reference/html/web.html#mvc-ann-requestmapping-uri-templates

@GetMapping("/owners/{ownerId}/pets/{petId}")
public Pet findPet(@PathVariable Long ownerId, @PathVariable Long petId) {
    // ...
}
[Spring Framework]
: https://docs.spring.io/spring-framework/docs/5.3.37/reference/html/web.html#mvc-ann-requestmapping-uri-templates

@GetMapping("/owners/{ownerId}/pets/{petId}")
public Pet findPet(@PathVariable Long ownerId, @PathVariable Long petId) {
    // ...
}

package app.study;

import java.io.UnsupportedEncodingException;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;

@Controller
@RequestMapping("/s4")
public class Study04 {

//	// 경로 변수를 이용하여 화면 출력하기
//	@GetMapping("/{page}") // /{page}를 작성한 이유는 변수화(경로변수) 할것이라는 의미
//	public String url1(@PathVariable String page) { // String으로 전달받을거고, 이름은 page다라는 의미
//		return "study/s4/" + page;
//	}
	
	// String의 이름을 바꾸고 싶을때(page -> page1)
	// @GetMapping("/{page}") 와 @PathVariable("page") 를 같게하고 page라는 변수명을
	// return에서 사용하고 싶지 않을 때 String의 변수 이름을 다르게 한다.
	@GetMapping(value = {"/v/{page}", "/v/"}) // /{page}를 작성한 이유는 변수화(경로변수) 할것이라는 의미
//	@GetMapping("/v/{page}")
	// name = 경로 변수명 지정
	// value = 기본 경로 변수명 지정
	// required = 기본은 true > false (경로 주소가 2개 이상이여야 한다.)
	public String url1(@PathVariable(name ="page", required = false) String page1) { // String으로 전달받을거고, 이름은 page다라는 의미
		System.out.println("page1");
		return "study/s4/" + page1;
	}
	
	
	// 경로 변수에 따라 데이터 화면에 전달하기
	@GetMapping("/data/{name}/{age}")
	public String url2(
//			@PathVariable String name,
//			@PathVariable int age,
			// Map을 사용해서 위에처럼 작성하지 않고 하나로 작성
			@PathVariable Map map,
			Model model) {
		System.out.println(map);
		
		model.addAttribute(map); // 값으로 보내는 방법 숙제
		
		model.addAttribute("map", map); // 키와 값으로 보낸다.
//		System.out.println(name);
//		System.out.println(age);
//		model.addAttribute("name", name);
//		model.addAttribute("age", age);
		return "study/s4/quest";
	}
	
//	@GetMapping("/data/{name1}")
//	public String url2(@PathVariable(name = "name1") String num, HttpServletRequest req) {
//		System.out.println(num + " name이 2다 ");
//		return "study/s4/page" + num;
//	}
	
}

<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>QUEST</title>
</head>
<body>
<h1>${map}</h1>



<h1>${map.name}</h1>
<h1>${map.age}</h1>
<hr>
<h1>${name}</h1>
<h1>${age}</h1>


</body>
</html>


