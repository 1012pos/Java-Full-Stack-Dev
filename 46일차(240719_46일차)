20240719
1. 팀프로젝트는 페이지 인당 5페이지 이상 만들어야 함

2. 업무프로세스 지식을 쌓아야 팀프로젝트를 만들때 도움이 됨

3. 하나의 기능 CRUD 만들면 4페이지이상 나오기 때문에 너무 걱정할 필요 없음

4. 다음주부터 오전 시간은 그대로 강의하시고, 오후에는 2시간정도 강의하심, 나머지 2시간은 복습 및 팀회의
(7월달 안으로 부족한 부분 채워야 함, 그래야 8월부터 팀프로젝트 가능)


5. 매달 일정 정리해서 강사님께 보내드려야함(기존 형식으로 하면 될듯)
- 각자 부족한 부분 파악부터 하기
- 팀별 시간(매일 2시간 + a)
- 시험보는날 파악해서 팀별 스케줄 정리해야함


6. Testing(Mock Objects, TestContext Framework, Spring MVC Test, WebTestClient.)

7. src/main/java 와 src/test/java 의 패키지가 같아야 한다.

8. 테스트를 할때는 패키지명 + 클래스명을 동일하게 하는게 규칙이다.

9. build.gradle에 testImplementation 'org.springframework.boot:spring-boot-starter-test'
: 위의 코드가 없으면 @SpringBootTest 이 어노테이션을 사용할 수 없다 이럴때 @ExtendWith(SpringExtension.class)
@Import({Temp1Service.class}) 이 어노테이션을 사용하던지 하지만 이건 특정 테스트만 할 때 사용한다.
그리고 @ExtendWith(SpringExtension.class), @ContextConfiguration(locations = "classpath:context.xml") 이 어노테이션을 사용하면, 스프링에서 빈 객체를 생성할수 있다.
그렇기 때문에 차이점이 있다.

10. @BeforeAll
: 클래스가 실행 되자마자(처음에) 한번 실행

11. @BeforeEach
: @Test 전에 실행(@Test가 많다면 반복 실행)


12. @AfterAll
: 클래스 테스트가 다 실행한 후에(마지막에) 실행 한다.


13. @AfterEach
: @Test 후에 실행(@Test가 많다면 반복실행)

14. 메소드를 1:1로 맞춰서 테스트하는게 기본이다.

15. @Test 어노테이션이 있어야 Junit이 실행된다.

16. 단위테스트(Junit) 환경을 만들어줘야 테스트를 할수 있다.
1. @SpringBootTest
: 전체적으로 사용(메모리사용 많음, 무거움)

2. @ExtendWith(SpringExtension.class) // 단위테스트 환경 설정
   @Import({AppService.class})		   // 지정한 클래스 가져오기
: 필요한것만 테스트할때 사용(제일 가벼움)
   
3.  @ExtendWith(SpringExtension.class)
	@ContextConfiguration(locations = "classpath:context.xml")
: SpringFramework에서 xml 파일이 있을때 사용

17. @ExtendWith(SpringExtension.class)
: 위의 어노테이션은 "@Autowired 기능을 할수 있게 하는" 어노테이션이다. 즉 주입받으려면 사용해야한다.(DI)

18. @Autowired private AppService appService;
: appService = new AppService(); 와 같은 의미(객체생성, 생성자)

19. 데이터베이스에 이미지를 저장하는 방법(`file` 	LONGBLOB)
USE edu;

CREATE OR REPLACE TABLE images 
(
	`no` 	INT 				NOT NULL AUTO_INCREMENT PRIMARY KEY,
	`file` 	LONGBLOB			NOT NULL,
	`type` 	VARCHAR(100) 		NOT NULL,
	`size` 	long 				NOT NULL,
	`del` 	BOOLEAN 			NOT NULL DEFAULT(0)
);

#INSERT INTO images (`file`, `type`, `size`) VALUE (#{file}, #{type}, #{size});

SELECT * FROM images;

20. ResponseEntity<?>
: 응답객체
	
