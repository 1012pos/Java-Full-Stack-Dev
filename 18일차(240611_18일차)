20240611
1. MyBatis 외부 라이브러리
2. 창고를 만든다.(Factory)
3. 자바파일이 컴파일되면 클래스패스로 이동된다.
4. mybatis.xml은 클래스 패스에 있다.
5. MyBatis를 사용하면 메소드로 실행 가능하다.
6. Create.java 화면 출력용이다.
7. url을 치고 들어가면 get 메소드이다. (doGet)
8. post는 직접적으로 url을 치고 들어가면 안된다. post는 메소드가 존재하지 않기 때문에
url을 치고 들어가면 안된다.(post는 메소드가 없다.)
9. 데이터 처리는 post 방식으로 한다.
10. form 태그에서 method를 안쓰면 get이다.
11. form에서 post 방식으로 보내면 폼 데이터라고 한다.
12. 폼 데이터로 보내면 post 방식으로 보내야 한다.
13. form 태그에서 액션(action)을 실행하려면 button type이 submit이어야 한다.
14. 이벤트 발생 / submit과 form의 action
15. form태그 -> Servlet(getParametr로 받는다.) -> Map 방식(입력값이 많기 때문에 Map에 담아 보낸다.) 또는 DTO 생성해서 DB에 저장
16. 입력값이 많기 때문에 Map에 담아 보낸다.
17. user.add 는 namespace가 user 이고, insert의 id가 add여서 user.add라고 작성하는 것이다.
18. paramterType은 객체인 HashMap으로 보내야 한다.
19. #{name}, #{email}에서 name, email 은 변수명이다.
20. #은 변수명과 값을 둘다 가져온다., $는 변수의 값만 가져온다. 그렇기 때문에 #을 써야한다.(MyBatis에서 사용, 데이터 바인딩)
전달받은 객체(HashMap)의 변수명과 값을 매칭시켜준다.
21. insert문은 결과값으로 상태값을(int로) 받는다.
22. 강사님 코드를 따라 치지 말고, 먼저 이해부터 하기
23. http://localhost:8080/web/Create
24. mybatis 비밀번호 02135임 / mariaDB 비밀번호 02135이거임 // 바꾸는 방법 heidi에서 사람 모양 클릭 후 비밀번호 변경
25. 앞으로 강사님 파일 cmd 창에서 git pull 하기
26. SELECT LAST_INSERT_ID();
27. sendRedirect는 get방식 호출 : 생성된 사용자 번호 전달
28. mybatis.xml에 root / 1234로 수정하기
29. Create -> insert - > Select (흐름)
30. 흐름도 꼭 작성하기
31. http://localhost:8080/web/Create 여기서 경로가 "/web" 인 이유는 Server 탭에서 Tomcat v9.0 더블클릭
-> Modules탭에서 /web으로 설정되어 있어서 그런것임
32. mariaDB 현재 쿼리 실행할때는 블록처리 한후 현재 쿼리 실행 하면됨
33. 주소 입력 방법의 기본(화면) doGet이고, 폼으로 데이터를 전송할 때는 반드시 doPost
34. resultType="user.UserDTO"
35. 순서가 자바파일부터인가? jsp 파일부터인가 ??
36. 화면 처리시 forward 메서드를 사용하는 이유는 대신 처리해달라는 의미(url 바뀌지 않고 처리), request 객체에 있다.
37. 화면 처리시 sendRedirect는 get방식 호출(url이 들어간다.), response객체에 있다.
38. spring.io 접속 > Projects > Tools4 > Spriong Tools 4 for Eclipse > 4.22.1 WINDOWS X86_64 다운 받기
39. cmd 창에서 cd /IDE -> dir -> java -jar 파일명.jar
(java -jar spring-tool-suite-4-4.22.1.RELEASE-e4.31.0-win32.win32.x86_64.self-extracting.jar)
40. C:\IDE\sts-4.22.1.RELEASE\work // work파일 위치
41. keep~ 선택
42. help -> about Spring Tool suit4
43. Dynamic Project이 없어서 Maven project 로 생성
44. Maven 프로젝트에서 Servlet 만들기
: web -> 우측키 Property -> Java Build Path -> Add Library 
Server Runtime[Apache Tomcat v9.0]을 등록 -> class 생성시 -> browser 클릭 후-> Httpservlet
-> servlet 생성 
45. web -> 우측키 -> Maven -> Update Project 클릭하면 -> Maven Dependencies가 생김
46. WEB-INF -> 우측키 -> new -> file -> ~~~.xml 파일을 생성한다. 그리고 나서 강사님 깃 허브에서
WebServlet -> WebContent -> WEB-INF -> web.xml 파일에서 전체 복사
그다음 -> webapp -> WEB-INF -> 아까 만든 web.xml파일에서 복사 한거 붙여 넣기 한후 welcome-file, servlet-mapping ,filter 지우기
47. pom.xml 이 있으면 maven 프로젝트가 가능해짐
48. 우리가 프로젝트 내에서 관리할 부분은 src와 pom.xml 파일임


package web;

import java.io.IOException;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

@WebServlet("/")
public class Study extends HttpServlet {

	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		System.out.println("안녕하세요.");
		resp.setCharacterEncoding("UTF-8");
		resp.setContentType("text/html; charset=UTF-8");
		resp.getWriter().append("안녕하세요");
	}
	
}


<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>web</groupId>
  <artifactId>web</artifactId>
  <version>1</version>
  <packaging>war</packaging>
  <name>web</name>
  
  <dependencies>
	<dependency>
	    <groupId>org.mybatis</groupId>
	    <artifactId>mybatis</artifactId>
	    <version>3.5.16</version>
	</dependency>
	
	<dependency>
	    <groupId>org.mariadb.jdbc</groupId>
	    <artifactId>mariadb-java-client</artifactId>
	    <version>3.4.0</version>
	</dependency>
  </dependencies>
</project>


<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" id="WebApp_ID" version="4.0">
  <display-name>WebServlet</display-name>
 
  
</web-app>

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>데이터 입력 화면</title>
<link rel="icon" href="<%=request.getContextPath()%>/www/img/logo.png" type="image/x-icon">
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
<div class="container mt-3">
	<h1 class="text-center">데이터를 입력하세요</h1>
	<form action="/web/Result" method="post">
		<div class="mb-3 mt-3">
			<label for="cnt" class="form-label">회전수 :</label>
			<input type="number" class="form-control" id="cnt" name="cnt" value="0">
		</div>
		<div class="mb-3 mt-3">
			<label for="txt" class="form-label">내용 :</label>
			<input type="text" class="form-control" id="txt" name="txt" placeholder="내용을 입력하세요." required="required" autocomplete="off">
		</div>
		<div class="d-grid gap-3">
			<input type="submit" value="전송" class="btn btn-primary btn-block">
		</div>
	</form>
</div>
</body>
</html>

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>데이터 출력 화면</title>
<link rel="icon" href="<%=request.getContextPath()%>/www/img/logo.png" type="image/x-icon">
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
<div class="container mt-3">
	<div class="d-grid gap-3">
		<a href="Form" class="btn btn-success btn-block">돌아가기</a>
	</div>
	<h1 class="text-center mt-3">입력한 결과</h1>
	<ol class="list-group list-group-numbered">
		<li class="list-group-item">입력 받은 값이 없습니다</li>
	</ol>
</div>
</body>
</html>

package web;

import java.io.IOException;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

@WebServlet("/Result")
public class Result extends HttpServlet {

	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		req.setCharacterEncoding("UTF-8"); // 콘솔창에서 한글 깨짐 방지위해 추가
		resp.setCharacterEncoding("UTF-8");
		resp.setContentType("text/html; charset=utf-8");
		String cnt = req.getParameter("cnt");
		String txt = req.getParameter("txt");
		System.out.println(cnt + ", "+ txt);
		print(req, resp, cnt, txt);
	}

	private void print(HttpServletRequest req, HttpServletResponse resp, String cnt, String txt) throws ServletException, IOException{
		
		String html = "<!DOCTYPE html>\n"
		+ "<html>\n"
		+ "<head>\n"
		+ "<meta charset=\"UTF-8\">\n"
		+ "<title>데이터 출력 화면</title>\n"
		+ "<link rel=\"icon\" href=\"<%=request.getContextPath()%>/www/img/logo.png\" type=\"image/x-icon\">\n"
		+ "<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n"
		+ "</head>\n"
		+ "<body>\n"
		+ "<div class=\"container mt-3\">\n"
		+ "	<div class=\"d-grid gap-3\">\n"
		+ "		<a href=\"Form\" class=\"btn btn-success btn-block\">돌아가기</a>\n"
		+ "	</div>\n"
		+ "	<h1 class=\"text-center mt-3\">입력한 결과</h1>\n"
		+ "	<ol class=\"list-group list-group-numbered\">\n";
	
		// 반복문 적용 하는 곳
		
		int c = Integer.parseInt(cnt); // 형변환(자료형 변경)
		if(c == 0) {
			html += "<li class=\"list-group-item\">입력 받은 값이 없습니다</li>\n";
		}else {
			for(int i = 0; i<c; i++) {
				html += "<li class=\"list-group-item\">" + txt + "</li>\n";
			}
		}
		// 반복문 끝
		
		html += "</ol>\n"
		+ "</div>\n"
		+ "</body>\n"
		+ "</html>";
	
	
		System.out.println(html);
		resp.getWriter().append(html); // 화면에 출력

	}
	
}

