20240829
1. 네트워크 응용 프로그램 및 프로토콜 구현

2. 소켓(Socket)
: 네트워크에서 통신을 위한 엔드포인트를 제공하는 추상화된 소프트웨어 구조입니다. 
소켓은 컴퓨터 네트워크에서 데이터를 송수신하는 기본 단위로, 클라이언트와 서버 간의 통신을 관리합니다. 
소켓은 네트워크 프로그래밍에서 중요한 역할을 하며, 다양한 프로토콜을 지원합니다.
소켓은 네트워크 통신을 위한 소프트웨어 인터페이스로, 네트워크 상의 특정 포트에서 데이터를 전송하거나 수신하기 위해 사용됩니다. 
소켓은 데이터가 전송되는 경로를 정의하며, 클라이언트와 서버 간의 데이터 교환을 처리합니다.

3. 네트워크 소켓, 웹 소켓

4. 핸드셰이크(HandShake)
: 핸드셰이크(handshake)는 네트워크 통신에서 두 개체 간의 연결을 수립하기 위해 초기화 과정으로 진행되는 일련의 상호작용을 의미합니다. 
이 과정은 일반적으로 연결을 설정하고 필요한 정보를 교환하며, 통신이 안정적이고 신뢰할 수 있는지 확인합니다. 핸드셰이크는 다양한 프로토콜에서 사용되며, 
각 프로토콜마다 핸드셰이크의 세부 사항이 다를 수 있습니다. 
여기서는 웹 소켓(WebSocket)과 일반적인 네트워크 프로토콜에서의 핸드셰이크를 살펴보겠습니다.

: WebSocket 핸드셰이크는 클라이언트와 서버 간의 WebSocket 연결을 수립하기 위한 초기 프로세스입니다. 
WebSocket은 HTTP 프로토콜을 통해 핸드셰이크를 시작하고, 
핸드셰이크가 성공하면 WebSocket 프로토콜로 전환하여 지속적인 양방향 통신을 가능하게 합니다.

5. 웹소켓
: 챗봇
: 소켓은 실시간으로 정보를 받을수 있다.

6. 스레드, 멀티스레드
스레드
: 스레드는 프로세스 내에서 실행되는 경량의 독립적인 작업 단위입니다. 
각 스레드는 프로세스의 메모리 공간을 공유하며, 독립적으로 실행될 수 있습니다.

멀티스레드
: 멀티스레드는 하나의 프로세스 내에서 여러 스레드를 동시에 실행하는 기술입니다. 
이는 동시에 여러 작업을 수행하거나, 긴 작업을 분리하여 비동기적으로 처리할 수 있게 합니다.


7. WebSocket
: WebSockets는 웹에서 실시간 양방향 통신을 가능하게 하는 프로토콜입니다. 
WebSockets는 HTTP를 통해 핸드셰이크를 수행하여 연결을 수립한 후, 
클라이언트와 서버 간의 지속적인 연결을 유지하면서 데이터를 실시간으로 주고받을 수 있습니다. 
이로 인해 웹 애플리케이션에서 보다 빠르고 효율적인 실시간 데이터 전송이 가능합니다. 

8. STOMP
: STOMP (Simple Text Oriented Messaging Protocol)은 간단하고 유연한 메시징 프로토콜로, 
메시지 브로커와 클라이언트 간의 통신을 위한 표준 프로토콜입니다. WebSocket을 통해 실시간 메시징을 구현할 때 사용되며, 
클라이언트와 서버 간의 양방향 메시징을 지원합니다. STOMP는 메시지를 텍스트 형식으로 전송하며, 
다양한 애플리케이션에서 메시지 기반의 통신을 쉽게 구현할 수 있도록 도와줍니다.


9. https://docs.spring.io/spring-framework/reference/web/websocket.html
   https://spring.io/guides/gs/messaging-stomp-websocket
   https://docs.spring.io/spring-framework/reference/web/websocket/stomp.html
   https://stomp-js.github.io/stomp-websocket/codo/extra/docs-src/Usage.md.html
   
10. 소켓은 실시간으로 정보를 받을수 있다.

11. package com.app.config;

import org.springframework.context.annotation.Configuration;
import org.springframework.messaging.simp.config.MessageBrokerRegistry;
import org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;
import org.springframework.web.socket.config.annotation.StompEndpointRegistry;
import org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer;

@Configuration
@EnableWebSocketMessageBroker
public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {

	@Override
	public void registerStompEndpoints(StompEndpointRegistry registry) {
		// JS에서 웹소켓 접속 시 해당 URL로 연결
		registry.addEndpoint("/ws-app")
			.setAllowedOrigins("http://127.0.0.1:5500", "http://localhost:5500")
			.withSockJS();
	}

	@Override
	public void configureMessageBroker(MessageBrokerRegistry registry) {
		// 사용자가 서버에게 메세지를 전송할때 
		registry.setApplicationDestinationPrefixes("/msg");
		registry.enableSimpleBroker("/topic");
	}
	
}

: registry.addEndpoint("/ws-app") 이부분의 주소가 프론트에서 접근가능한 주소
: registry.setApplicationDestinationPrefixes("/msg"); 이부분의 주소가 서버에게 메세지를 받는 주소

12. WebSocket만 넣어도 Web이 가능하다 (dependency 부분)

13. http://192.168.0.56:5500/socket.html
: 접속할 아이피 작성후 url에 접속할 아이피로 접근 -> 접속테스트 누르고 -> 글 작성 후 -> 접속요청

14. buffer
: 데이터의 임시 저장 공간을 의미합니다. 컴퓨터 과학과 프로그래밍에서 버퍼는 데이터의 효율적인 처리와 전송을 위해 사용됩니다. 
버퍼는 데이터가 생성되거나 수신되는 즉시 처리되지 않을 때 데이터를 임시로 저장하는 메모리 영역입니다.
버퍼는 데이터가 전송되기 전이나 처리되기 전까지 임시로 저장되는 메모리 공간입니다. 
주로 데이터 스트림을 관리하거나 입출력(I/O) 작업의 효율성을 높이는 데 사용됩니다.

15. <nav class="container mt-2">
: 내비게이션 바(nav)를 페이지의 중앙에 위치시키고, 상단에 약간의 여백을 추가하여 레이아웃을 정돈하는 역할을 합니다.
: <nav class="container mt-2">에서 class에 container와 mt-2를 넣는 이유는 웹 페이지의 스타일을 조정하기 위해서입니다. 이 클래스들은 CSS 프레임워크, 특히 Bootstrap을 사용할 때 일반적으로 사용됩니다. 
: 각각의 클래스가 하는 역할은 다음과 같습니다

container 클래스
역할: 콘텐츠를 중앙에 배치하고, 페이지 너비에 맞게 적절히 정렬합니다.
결과: 페이지의 중앙에 고정된 너비를 가진 박스가 생성되어, 내용이 이 박스 안에 정렬됩니다.

mt-2 클래스
역할: 상단에 여백(margin)을 추가합니다.
결과: 내비게이션 바가 페이지 상단으로부터 일정량 떨어지게 됩니다.

16. 엔드포인트(endpoint)는 네트워크 통신에서 서로 다른 시스템이나 애플리케이션 간의 데이터 교환 지점을 의미합니다.
웹 애플리케이션에서는 엔드포인트가 URL 경로를 통해 접근할 수 있는 특정 기능이나 리소스를 나타냅니다.
