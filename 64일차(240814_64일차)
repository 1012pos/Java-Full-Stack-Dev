20240814
1. ConsoleJPA 에서 ConsoleJpaApplication.java 파일이 main 메소드가 있는 파일이다.

2. JPA 는 무조건 Entity가 있어야 한다.

3. @GeneratedValue(strategy = GenerationType.IDENTITY)
: Auto_Increment랑 같은 의미 

4.eManager.persist(user); 
: 테이블에 데이터 적용해줘

5. persist(영속성)

6. Transation persistence context
: Application <-> persistence context(영속성 컨텍스트) <-> DB

7. https://www.baeldung.com/spring-data, https://www.baeldung.com/jpa-hibernate-persistence-context 스프링 JPA에 관련된 사이트

8. 영속성 컨텍스트가 임시 저장된 데이터에서 새로운 데이터가 들어오면 알아서 수정한다.
이말은 즉슨 업데이트를 하지 않아도 자동으로 판단해서 수정해 준다.

9. 업데이트는 순서와 상관없이 트랜잭션 후(Commit, Rollback)에 마지막에 데이터를 업데이트 해준다.

10. public interface UserEntityRepository extends JpaRepository<UserEntity, Integer> {}
: Integer는 PK의 자료형을 적어주면 된다.

11. orElseThrow()
: 오류 발생

12. @Transactional
: 업데이트 할때 사용해야 한다. 만약 @Transactional 없으면 save() 메서드를 사용한다.
둘다 사용하지 않으면 데이터는 휘발성으로 날라간다.
//	@Transactional
	public void run() {
		log.info("UserService Run!");
		// insert();
		// select();
		UserEntity user = userEntityRepository.findById(4).orElseThrow();
		user.setUserNm("고길동");
		userEntityRepository.save(user);
	}

13. JPA에는 Entity파일을 무조건 만들어야 하고, 절대 없어서는 안될 파일이 Entity 파일이다.

14. https://docs.spring.io/spring-data/jpa/reference/3.2/jpa/query-methods.html#jpa.query-methods.query-creation 참조

15. "interface" 파일에는 어노테이션을 사용하지 않는다. @Controller, @Service 등의 어노테이션에는 "class"에만 사용한다.

16. Optional
: null에 대한것을 처리해준다.

17. UserEntityRepository.java
package com.app.repository;

import java.util.List;
import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;

import com.app.model.UserEntity;


public interface UserEntityRepository extends JpaRepository<UserEntity, Integer> {
	
	// https://docs.spring.io/spring-data/jpa/reference/3.2/jpa/query-methods.html#jpa.query-methods.query-creation
	
	// 1. 이름 검색 조건(해당 사용자 이름 조회) where user_nm = '고길동'
	public Optional<UserEntity> findByUserNm(String userNm);
	
	// 2. 이름과 비밀번호 검색 조건 : where user_nm = '고길동' and user_pw = 1234
	public Optional<UserEntity> findByUserNmAndUserPwd (String userNm, String userPwd);
	
	// 3. 이름 검색 조건 (비슷한 이름 조회) where user_nm like '%길%'
	// like가 여러개 나오기 때문에 List로 받는다.
	public List<UserEntity> findByUserNmLike(String userNm); 	// 변수의 값에 와일드카드의 기호를 추가하여 사용하여야 한다. "%", "_"
	public List<UserEntity> findByUserNmStartingWith(String userNm); // 변수의 뒤로 오는 값에 대하여 알아서 찾아준다 : 변수 + "%"
	public List<UserEntity> findByUserNmEndingWith(String userNm);   // 변수의 앞에 오는 값에 대하여 알아야 찾아준다. : "%" + 변수
	public List<UserEntity> findByUserNmContaining(String userNm);   // 변수의 앞과 뒤에 오는 값에 대하여 찾아준다. : "%" + 변수 + "%"
	
}
