20240528
1. 각 능력단위에 따른 지식을 어떤걸 배웠는지 정리하기

2. 절차지향이 아니라, 객체지향으로 파일을 만들어야 하는데, 여기에 재사용이라는 개념이 들어간다.

3. 자바 프로그램 만들때 재사용이라는 개념 생각하면서 구현하기(ex, 기능적 및 반복적인 것인지 구분 지으면 됨)

4. 아래의 메소드 사용 종류
- execute( ); : 테이블 생성시 사용
- executeUpdate( ); : insert, update, delete 사용시 사용
- executeQuery( ); : select 사용시 사용 ResultSet 객체 때문에 사용함

5. 항상 데이터 베이스 켜고나서 시작하기(HeidiSQL)

6. 프로그램을 끄면 데이터가 없애지는 휘발적인 데이터를 저장하기 위해 데이터베이스(오라클, mariaDB, mysql 등)를 사용하는 것이다.

7. 자바 <--------> mariaDB
            ( JDBC )

8. 외부 라이브러리를 사용하게 되면 try ~ catch를 사용해야 한다.

9. 서로 다른 자료형을 한번에 처리하려면 DTO가 필요하다.(setter, getter)

10. 오류가 났을때 오류 메시지 차근차근 확인하기

11. 강사님 파일 업로드 다운 실패 했을 경우 대처 방안 
Team - > show in history -> 주석 알아보기 파일에서 우측키 -> Reset -> hard -> 다시 Team -> Pull

12. return은 끝이라는 뜻이기 때문에, return 값 뒤에는 아무것도 오지 못한다고 생각하면 쉬움

13. 자바에서는 binding과 맵핑은 같은 의미이다.

14. 간결하게, 클린코드, 재사용이 될 것 같은 기능은 분리하기(코딩은 답이 없음, 강사님은 기능별로 메소드를 만드는걸 좋아하심)

15. try ~ catch는 외부 라이브러리를 사용할때나, 인, 아웃 발생할 때 사용하는 자바문법

16. list는 배열이라고 생각하면 되고, 객체를 담는다.

17. DTO 같은 배열을 담을수 있는것이 list 이다.

18. .size( )는 행의 수이다.

19. cud기능(입력, conn, (DataDto) list.get(i), "I"); 
: (DataDto) list.get(i)는 List라는 객체에서 하나씩 뽑아올 때 get(i) 사용한다.

20. List는 "object"인데, 형변환하기 위해 (DataDto)를 붙여 줬다.

21. 객체를 List에 담을때는 무조건 "new" 해야 한다. (DataDto data = new DataDto();)

22. 객체를 배열에 담으려면 List를 사용한다.

23. DataDto 같은 객체(클래스)는 List에 담아야 한다.

24. List<DataDto> list = 데이터생성();
	for(int i = 0; i < list.size(); i++) {
	cud기능(입력, conn, (DataDto) list.get(i), "I"); 
	}

// List가 object 타입이라, 형변화를 해줘야 하는데 여기서 방법이 2가지가 있다.
1. (DataDto) list.get(i) 이것처럼 list 앞에 (DataDto) 를 작성해서 형변환 해주면 된다.
2. List<DataDto> list = 데이터생성(); 이것처럼, List의 자료형을 <DataDto>로 작성해서 형변환 시켜 주면 된다.

25. List 타입 확인 방법은  list.get(i)여기 부분에 마우스를 갖다 되면 된다.

===============================
<리팩토링 한 코드 해석>
가변적으로 받는 부분을 ?물음표로 대체
우리가 만든 dto 객체(class)를 배열에 담으려면 "list" 사용 => DataDto가 담겨진 배열객체 생성


55: 데이터를 메서드로 받게끔 처리
57: list.size 행의 수 사이즈
58 : object형이기 때문에 만든 DTO로 형변환 list.get(i) 한줄가져오기, 어떤기능이냐
list는 원래 object형이고, list<DataDto> 로 데이터형을 지정했기 때문에 (DataDto)list.get(i)도 데이터형을 맞춰주기 위해 형변환 함

64 - 65 : 수정되어야할 값만 담기
70 : 삭제되어야할 값만 담기

79: 매번 new로 객체를 생성해야 새로운 주소값으로 저장됨
new를 하지 않으면 같은 주소값으로 저장되기 때문에 같은 값이 여러개 생김 (참조자료형으로 만들었기 때문)
=> 56번줄이 반복적으로 돌 수 있게 해줌

215 : 위쪽 물음표 들어간 sql의 순서에 맞게 1~6까지 dto에서 값을 가져오고 담음 (물음표의 위치)
===============================


package java0528;

public class Study01 {

	public static void main(String[] args) {

		String 드라이버 ="org.mariadb.jdbc.Driver";
		String 주소 ="jdbc:mariadb://localhost:3306/edu";
		String 사용자 ="root";
		String 비밀번호 ="1234";
		
		new DbController(드라이버, 주소, 사용자, 비밀번호);
		
		
	}

}


package java0528;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;

public class DbController {
	
	// 인스턴스 변수
	private String 드라이버;
	private String 주소;
	private String 사용자;
	private String 비밀번호;
	
	public DbController(String 드라이버, String 주소, String 사용자, String 비밀번호) { // 생성자
		this.드라이버 = 드라이버;
		this.주소 = 주소;
		this.사용자 = 사용자;
		this.비밀번호 = 비밀번호;
		시작();
	}
	
	private void 시작() { // 접근제한자 private 선언했기 때문에 이 클래스에서만 사용 가능
		try {
			Class.forName(드라이버);
			try {
				Connection conn = DriverManager.getConnection(주소, 사용자, 비밀번호);
				기능제어(conn);
				conn.close(); // 여기서만 conn을 종료하면 된다.
			} catch (SQLException e) {
				e.printStackTrace();
			}
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}
	}
	
	private void 기능제어(Connection conn) {
		System.out.println("테이블 생성 합니다.");
		String sql = "create OR REPLACE table 명단(";
			   sql += " 번호 	 int,";
			   sql += " 이름 	 varchar(50),";
			   sql += " 성별 	 varchar(50),";
			   sql += " 특징 	 varchar(50),";
			   sql += " 해적단    varchar(50),";
			   sql += " 역할 	 varchar(50)";
			   sql += ")";
		테이블생성(sql, conn);
	}
	
	
	private void 테이블생성(String sql, Connection conn) {
		System.out.println(sql);
		// 외부의 코드를 사용했기 때문에 try ~ catch 사용
		try {
			PreparedStatement ps = conn.prepareStatement(sql);
			ps.execute(); // 실행
			ps.close(); // ps를 종료
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	private void 데이터읽기(String sql, Connection conn) {
		
	}
	
	private void cud기능(String sql, Connection conn) { // 입력, 수정, 삭제
		
	}
	
	

}


package java0528;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;

public class DbController {
	
	// 인스턴스 변수
	private String 드라이버;
	private String 주소;
	private String 사용자;
	private String 비밀번호;
	
	public DbController(String 드라이버, String 주소, String 사용자, String 비밀번호) { // 생성자
		this.드라이버 = 드라이버;
		this.주소 = 주소;
		this.사용자 = 사용자;
		this.비밀번호 = 비밀번호;
		시작();
	}
	
	private void 시작() { // 접근제한자 private 선언했기 때문에 이 클래스에서만 사용 가능
		try {
			Class.forName(드라이버);
			try {
				Connection conn = DriverManager.getConnection(주소, 사용자, 비밀번호);
				기능제어(conn);
				conn.close(); // 여기서만 conn을 종료하면 된다.
			} catch (SQLException e) {
				e.printStackTrace();
			}
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}
	}
	
	private void 기능제어(Connection conn) {
		System.out.println("테이블 생성 합니다.");
		String sql = "create OR REPLACE table 명단(";
			   sql += " 번호 	 int,";
			   sql += " 이름 	 varchar(50),";
			   sql += " 성별 	 varchar(50),";
			   sql += " 특징 	 varchar(50),";
			   sql += " 해적단    varchar(50),";
			   sql += " 역할 	 varchar(50)";
			   sql += ")";
			   if(테이블생성(sql, conn)) {
				// DML >> CRUD
				// 1단계 데이터 넣기 (insert)
				  데이터생성();
				   
			   }else{
				System.out.println("테이블 생성 실패");
			   }
			}
	
	private void 데이터생성() { // 넣고자 하는 데이터임
		DataDto data = new DataDto(); // 다른곳의 클래스를 사용하기 위해 객체 생성
		data.set번호(1);
		data.set이름("몽키 D 루피");
		data.set성별("남자");
		data.set특징("고무고무 열매");
		data.set해적단("밀짚모자");
		data.set역활("선장");

		String sql = "insert into 명단 value (";
	
			  sql += data.get번호();
			  sql += ",'" + data.get이름() + "'"; // "'" , "'" 문자기 때문에 싱글 코트 사용해야함
			  sql += ",'" + data.get성별() + "'"; // "'" , "'" 문자기 때문에 싱글 코트 사용해야함
			  sql += ",'" + data.get특징() + "'"; // "'" , "'" 문자기 때문에 싱글 코트 사용해야함
			  sql += ",'" + data.get해적단() + "'"; // "'" , "'" 문자기 때문에 싱글 코트 사용해야함
			  sql += ",'" + data.get역활() + "'"; // "'" , "'" 문자기 때문에 싱글 코트 사용해야함
			  sql += ")";
			  
			  System.out.println(sql);
				
	}
	
	
	private boolean 테이블생성(String sql, Connection conn) {
		System.out.println(sql);
		// 외부의 코드를 사용했기 때문에 try ~ catch 사용
		try {
			PreparedStatement ps = conn.prepareStatement(sql);
			ps.execute(); // 실행
			ps.close(); // ps를 종료
			return true; // << 성공
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return false; // << 실패
	}
	
	private void 데이터읽기(String sql, Connection conn) {
		
	}
	
	private void cud기능(String sql, Connection conn) { // 입력, 수정, 삭제
		
	}
	
	

}

package java0528;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;

public class DbController {
	
	// 인스턴스 변수
	private String 드라이버;
	private String 주소;
	private String 사용자;
	private String 비밀번호;
	
	public DbController(String 드라이버, String 주소, String 사용자, String 비밀번호) { // 생성자
		this.드라이버 = 드라이버;
		this.주소 = 주소;
		this.사용자 = 사용자;
		this.비밀번호 = 비밀번호;
		시작();
	}
	
	private void 시작() { // 접근제한자 private 선언했기 때문에 이 클래스에서만 사용 가능
		try {
			Class.forName(드라이버);
			try {
				Connection conn = DriverManager.getConnection(주소, 사용자, 비밀번호);
				기능제어(conn);
				conn.close(); // 여기서만 conn을 종료하면 된다.
			} catch (SQLException e) {
				e.printStackTrace();
			}
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}
	}
	
	private void 기능제어(Connection conn) {
		System.out.println("테이블 생성 합니다.");
		String sql = "create OR REPLACE table 명단(";
			   sql += " 번호 	 int,";
			   sql += " 이름 	 varchar(50),";
			   sql += " 성별 	 varchar(50),";
			   sql += " 특징 	 varchar(50),";
			   sql += " 해적단    varchar(50),";
			   sql += " 역할 	 varchar(50)";
			   sql += ")";
			   if(테이블생성(sql, conn)) {
				// DML >> CRUD
				// 1단계 데이터 넣기 (insert)
				// sql = 데이터생성();
				// cud기능(sql, conn); 
				  cud기능(데이터생성(), conn); // <<
			   }else{
				System.out.println("테이블 생성 실패");
			   }
			}
	
	private String 데이터생성() { // 넣고자 하는 데이터임
		DataDto data = new DataDto(); // 다른곳의 클래스를 사용하기 위해 객체 생성
		data.set번호(1);
		data.set이름("몽키 D 루피");
		data.set성별("남자");
		data.set특징("고무고무 열매");
		data.set해적단("밀짚모자");
		data.set역활("선장");

		String sql = "insert into 명단 value (";
	
			  sql += data.get번호();
			  sql += ",'" + data.get이름() + "'"; // "'" , "'" 문자기 때문에 싱글 코트 사용해야함
			  sql += ",'" + data.get성별() + "'"; // "'" , "'" 문자기 때문에 싱글 코트 사용해야함
			  sql += ",'" + data.get특징() + "'"; // "'" , "'" 문자기 때문에 싱글 코트 사용해야함
			  sql += ",'" + data.get해적단() + "'"; // "'" , "'" 문자기 때문에 싱글 코트 사용해야함
			  sql += ",'" + data.get역활() + "'"; // "'" , "'" 문자기 때문에 싱글 코트 사용해야함
			  sql += ")";
			  
			  System.out.println(sql);
			  return sql;
	}
	
	
	private boolean 테이블생성(String sql, Connection conn) {
		System.out.println(sql);
		// 외부의 코드를 사용했기 때문에 try ~ catch 사용
		try {
			PreparedStatement ps = conn.prepareStatement(sql);
			ps.execute(); // 실행
			ps.close(); // ps를 종료
			return true; // << 성공
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return false; // << 실패
	}
	
	private void 데이터읽기(String sql, Connection conn) {
		
	}
	
	private void cud기능(String sql, Connection conn) { // 입력, 수정, 삭제
		System.out.println(sql);
		// 외부의 코드를 사용했기 때문에 try ~ catch 사용
		try {
			PreparedStatement ps = conn.prepareStatement(sql);
			int result = ps.executeUpdate();
			System.out.println(result);
			ps.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}	
	}
	
	

}

package java0528;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import java0527.TestDTO;

public class DbController {
	
	// 인스턴스 변수
	private String 드라이버;
	private String 주소;
	private String 사용자;
	private String 비밀번호;
	
	public DbController(String 드라이버, String 주소, String 사용자, String 비밀번호) { // 생성자
		this.드라이버 = 드라이버;
		this.주소 = 주소;
		this.사용자 = 사용자;
		this.비밀번호 = 비밀번호;
		시작();
	}
	
	private void 시작() { // 접근제한자 private 선언했기 때문에 이 클래스에서만 사용 가능
		try {
			Class.forName(드라이버);
			try {
				Connection conn = DriverManager.getConnection(주소, 사용자, 비밀번호);
				기능제어(conn);
				conn.close(); // 여기서만 conn을 종료하면 된다.
			} catch (SQLException e) {
				e.printStackTrace();
			}
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}
	}
	
	private void 기능제어(Connection conn) {
		System.out.println("테이블 생성 합니다.");
		String sql = "create OR REPLACE table 명단(";
			   sql += " 번호 	 int,";
			   sql += " 이름 	 varchar(50),";
			   sql += " 성별 	 varchar(50),";
			   sql += " 특징 	 varchar(50),";
			   sql += " 해적단    varchar(50),";
			   sql += " 역활 	 varchar(50)";
			   sql += ")";
	   if(테이블생성(sql, conn)) {
		// DML >> CRUD
		// 1단계 데이터 넣기 (insert)
		// sql = 데이터생성();
		// cud기능(sql, conn); 
		  cud기능(데이터생성(), conn); // <<
		  
		  // 읽기
		  데이터읽기("select * from 명단", conn);
		  
		  // 수정
		  sql = "update 명단 set 역활 = '광대' where 번호 = 1";
		  cud기능(sql, conn);
		  데이터읽기("select * from 명단", conn);
		  
		  // 삭제
		  sql = "delete from 명단 where 번호 = 1";
		  cud기능(sql, conn);
		  데이터읽기("select * from 명단", conn);
		  
	   }else{
		System.out.println("테이블 생성 실패");
	   }
	}
	
	private String 데이터생성() { // 넣고자 하는 데이터임
		DataDto data = new DataDto(); // 다른곳의 클래스를 사용하기 위해 객체 생성
		data.set번호(1);
		data.set이름("몽키 D 루피");
		data.set성별("남자");
		data.set특징("고무고무 열매");
		data.set해적단("밀짚모자");
		data.set역활("선장");

		String sql = "insert into 명단 value (";
	
			  sql += data.get번호();
			  sql += ",'" + data.get이름() + "'"; // "'" , "'" 문자기 때문에 싱글 코트 사용해야함
			  sql += ",'" + data.get성별() + "'"; // "'" , "'" 문자기 때문에 싱글 코트 사용해야함
			  sql += ",'" + data.get특징() + "'"; // "'" , "'" 문자기 때문에 싱글 코트 사용해야함
			  sql += ",'" + data.get해적단() + "'"; // "'" , "'" 문자기 때문에 싱글 코트 사용해야함
			  sql += ",'" + data.get역활() + "'"; // "'" , "'" 문자기 때문에 싱글 코트 사용해야함
			  sql += ")";
			  
			  System.out.println(sql);
			  return sql;
	}
	
	
	private boolean 테이블생성(String sql, Connection conn) {
		System.out.println(sql);
		// 외부의 코드를 사용했기 때문에 try ~ catch 사용
		try {
			PreparedStatement ps = conn.prepareStatement(sql);
			ps.execute(); // 실행
			ps.close(); // ps를 종료
			return true; // << 성공 // return은 끝이라는 뜻이기 때문에, return 값 뒤에는 아무것도 오지 못한다고 생각하면 쉬움
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return false; // << 실패
	}
	
	private void 데이터읽기(String sql, Connection conn) {
		System.out.println(sql);
			try {
			PreparedStatement ps = conn.prepareStatement(sql);
			ResultSet rs = ps.executeQuery();
			
			while(rs.next()) {
				DataDto data = new DataDto();
				data.set번호(rs.getInt("번호"));
				data.set이름(rs.getString("이름"));
				data.set성별(rs.getString("성별"));
				data.set특징(rs.getString("특징"));
				data.set해적단(rs.getString("해적단"));
				data.set역활(rs.getString("역활"));
				System.out.println(data);
			}
			rs.close();
			ps.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
	}

	
	private void cud기능(String sql, Connection conn) { // 입력, 수정, 삭제
		System.out.println(sql);
		// 외부의 코드를 사용했기 때문에 try ~ catch 사용
		try {
			PreparedStatement ps = conn.prepareStatement(sql);
			int result = ps.executeUpdate();
			System.out.println(result);
			ps.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}	
	}
	
	

}

package java0528;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class DbController {
	
	private String 드라이버;
	private String 주소;
	private String 사용자;
	private String 비밀번호;
	
	private String 테이블 = "create OR REPLACE table "
			            + " 명단 ("
						+ " 번호 		int,"
						+ " 이름 		varchar(50),"
						+ " 성별 		varchar(50),"
						+ " 특징 		varchar(50),"
						+ " 해적단 	varchar(50),"
						+ " 역활		varchar(50)"
						+ " )";
	private String 입력 = "insert into 명단 value (?,?,?,?,?,?)";
	private String 읽기 = "select * from 명단";
	private String 수정 = "update 명단 set 역활 = ? where 번호 = ?";
	private String 삭제 = "delete from 명단 where 번호 = ?";
	
	public DbController(String 드라이버, String 주소, String 사용자, String 비밀번호) {
		this.드라이버 = 드라이버;
		this.주소 = 주소;
		this.사용자 = 사용자;
		this.비밀번호 = 비밀번호;
		시작();
	}
	
	private void 시작() {
		try {
			Class.forName(드라이버);
			Connection conn = DriverManager.getConnection(주소, 사용자, 비밀번호);
			기능제어(conn);
			conn.close();
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	private void 기능제어(Connection conn) {
		if(테이블생성(테이블, conn)) {
			List<DataDto> list = 데이터생성();
			for(int i = 0; i < list.size(); i++) {
				cud기능(입력, conn, (DataDto) list.get(i), "I"); 
			}
			데이터읽기(읽기, conn);
			
			DataDto data = new DataDto();
			data.set번호(10);
			data.set역활("광대");
			cud기능(수정, conn, data, "U");
			데이터읽기(읽기, conn);
			
			data = new DataDto();
			data.set번호(10);
			cud기능(삭제, conn, data, "D");
			데이터읽기(읽기, conn);
		} else {
			System.out.println("테이블 생성 실패!!");
		}
	}
	
	private List 데이터생성() {
		List list = new ArrayList<DataDto>();
		
		DataDto data = new DataDto();
		data.set번호(1);
		data.set이름("몽키 D 루피");
		data.set성별("남자");
		data.set특징("고무고무 열매");
		data.set해적단("밀짚모자");
		data.set역활("선장");
		list.add(data);
		
		data = new DataDto();
		data.set번호(2);
		data.set이름("롤로노아 조로");
		data.set성별("남자");
		data.set특징("삼도류");
		data.set해적단("밀짚모자");
		data.set역활("부선장");
		list.add(data);
		
		data = new DataDto();
		data.set번호(3);
		data.set이름("상디");
		data.set성별("남자");
		data.set특징("요리사");
		data.set해적단("밀짚모자");
		data.set역활("요리사");
		list.add(data);
		
		data = new DataDto();
		data.set번호(4);
		data.set이름("나미");
		data.set성별("여자");
		data.set특징("항해사");
		data.set해적단("밀짚모자");
		data.set역활("항해사");
		list.add(data);
		
		data = new DataDto();
		data.set번호(5);
		data.set이름("우솝");
		data.set성별("남자");
		data.set특징("사격");
		data.set해적단("밀짚모자");
		data.set역활("저격수");
		list.add(data);
		
		data = new DataDto();
		data.set번호(6);
		data.set이름("토니토니 쵸파");
		data.set성별("미정");
		data.set특징("사람사람 열매");
		data.set해적단("밀짚모자");
		data.set역활("의사");
		list.add(data);
		
		data = new DataDto();
		data.set번호(7);
		data.set이름("니코 로빈");
		data.set성별("여자");
		data.set특징("꽃꽃 열매");
		data.set해적단("밀짚모자");
		data.set역활("고고학자");
		list.add(data);
		
		data = new DataDto();
		data.set번호(8);
		data.set이름("프랑키");
		data.set성별("남자");
		data.set특징("사이보그");
		data.set해적단("밀짚모자");
		data.set역활("조선공");
		list.add(data);
		
		data = new DataDto();
		data.set번호(9);
		data.set이름("브록");
		data.set성별("남자");
		data.set특징("연주자");
		data.set해적단("밀짚모자");
		data.set역활("선원");
		list.add(data);
		
		data = new DataDto();
		data.set번호(10);
		data.set이름("버기");
		data.set성별("남자");
		data.set특징("동강동강 열매");
		data.set해적단("버기");
		data.set역활("선장");
		list.add(data);
		
		return list;
	}
	
	private boolean 테이블생성(String sql, Connection conn) {
		System.out.println(sql);
		try {
			PreparedStatement ps = conn.prepareStatement(sql);
			ps.execute();
			ps.close();
			return true;  // << 성공
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return false;  // << 실패
	}
	
	private void 데이터읽기(String sql, Connection conn) {
		System.out.println(sql);
		try {
			PreparedStatement ps = conn.prepareStatement(sql);
			ResultSet rs = ps.executeQuery();
			
			while(rs.next()) {
				DataDto data = new DataDto();
				data.set번호(rs.getInt("번호"));
				data.set이름(rs.getString("이름"));
				data.set성별(rs.getString("성별"));
				data.set특징(rs.getString("특징"));
				data.set해적단(rs.getString("해적단"));
				data.set역활(rs.getString("역활"));
				System.out.println(data);
			}
			rs.close();
			ps.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	private void cud기능(String sql, Connection conn, DataDto data, String type) {
		System.out.println(sql);
		try {
			PreparedStatement ps = conn.prepareStatement(sql);
			
			if("I".equals(type)) { // I의 의미는 insert이고, .equals는 문자비교
				ps.setInt(1, data.get번호());
				ps.setString(2, data.get이름());
				ps.setString(3, data.get성별());
				ps.setString(4, data.get특징());
				ps.setString(5, data.get해적단());
				ps.setString(6, data.get역활());
			} else if("U".equals(type)) { // U의 의미는 update이고, .equals는 문자비교
				ps.setString(1, data.get역활());
				ps.setInt(2, data.get번호());
			} else if("D".equals(type)) { // D의 의미는 delete이고, .equals는 문자비교
				ps.setInt(1, data.get번호());
			}
			
			int result = ps.executeUpdate();
			System.out.println(result);
			ps.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

}




