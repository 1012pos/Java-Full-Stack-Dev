20240528
1. 각 능력단위에 따른 지식을 어떤걸 배웠는지 정리하기

2. 절차지향이 아린라, 객체지향으로 파일을 만들어야 하는데, 여기에 재사용이라는 개념이 들어간다.

3. 자바 프로그램 만들때 재사용이라는 개념 생각하면서 구현하기(ex, 기능적 및 반복적인 것인지 구분 지으면 됨)

4. 아래의 메소드 사용 종류
- execute( ); : 테이블 생성시 사용
- executeUpdate( ); : insert, update, delete 사용시 사용
- executeQuery( ); : select 사용시 사용 ResultSet 객체 때문에 사용함

5. 항상 데이터 베이스 켜고나서 시작하기(HeidiSQL)

6. 프로그램을 끄면 데이터가 없애지는 휘발적인 데이터를 저장하기 위해 데이터베이스(오라클, mariaDB, mysql 등)를 사용하는 것이다.

7. 자바 <--------> mariaDB
        ( JDBC )

8. 외부 라이브러리를 사용하게 되면 try ~ catch를 사용해야 한다.

9. 서로 다른 자료형을 한번에 처리하려면 DTO가 필요하다.(setter, getter)

package java0528;

public class Study01 {

	public static void main(String[] args) {

		String 드라이버 ="org.mariadb.jdbc.Driver";
		String 주소 ="jdbc:mariadb://localhost:3306/edu";
		String 사용자 ="root";
		String 비밀번호 ="1234";
		
		new DbController(드라이버, 주소, 사용자, 비밀번호);
		
		
	}

}


package java0528;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;

public class DbController {
	
	// 인스턴스 변수
	private String 드라이버;
	private String 주소;
	private String 사용자;
	private String 비밀번호;
	
	public DbController(String 드라이버, String 주소, String 사용자, String 비밀번호) { // 생성자
		this.드라이버 = 드라이버;
		this.주소 = 주소;
		this.사용자 = 사용자;
		this.비밀번호 = 비밀번호;
		시작();
	}
	
	private void 시작() { // 접근제한자 private 선언했기 때문에 이 클래스에서만 사용 가능
		try {
			Class.forName(드라이버);
			try {
				Connection conn = DriverManager.getConnection(주소, 사용자, 비밀번호);
				기능제어(conn);
				
				conn.close(); // 여기서만 conn을 종료하면 된다.
			} catch (SQLException e) {
				e.printStackTrace();
			}
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}
	}
	
	private void 기능제어(Connection conn) {
		System.out.println("테이블 생성 합니다.");
		String sql = "create OR REPLACE table 명단(";
			   sql += " 번호 	 int,";
			   sql += " 이름 	 varchar(50),";
			   sql += " 성별 	 varchar(50),";
			   sql += " 특징 	 varchar(50),";
			   sql += " 해적단    varchar(50),";
			   sql += " 역할 	 varchar(50)";
			   sql += ")";
		테이블생성(sql, conn);
	}
	
	
	private void 테이블생성(String sql, Connection conn) {
		System.out.println(sql);
		// 외부의 코드를 사용했기 때문에 try ~ catch 사용
		try {
			PreparedStatement ps = conn.prepareStatement(sql);
			ps.execute(); // 실행
			ps.close(); // ps를 종료
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	private void 데이터읽기(String sql, Connection conn) {
		
	}
	
	private void cud기능(String sql, Connection conn) { // 입력, 수정, 삭제
		
	}
	
	

}


package java0528;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;

public class DbController {
	
	// 인스턴스 변수
	private String 드라이버;
	private String 주소;
	private String 사용자;
	private String 비밀번호;
	
	public DbController(String 드라이버, String 주소, String 사용자, String 비밀번호) { // 생성자
		this.드라이버 = 드라이버;
		this.주소 = 주소;
		this.사용자 = 사용자;
		this.비밀번호 = 비밀번호;
		시작();
	}
	
	private void 시작() { // 접근제한자 private 선언했기 때문에 이 클래스에서만 사용 가능
		try {
			Class.forName(드라이버);
			try {
				Connection conn = DriverManager.getConnection(주소, 사용자, 비밀번호);
				기능제어(conn);
				
				conn.close(); // 여기서만 conn을 종료하면 된다.
			} catch (SQLException e) {
				e.printStackTrace();
			}
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}
	}
	
	private void 기능제어(Connection conn) {
		System.out.println("테이블 생성 합니다.");
		String sql = "create OR REPLACE table 명단(";
			   sql += " 번호 	 int,";
			   sql += " 이름 	 varchar(50),";
			   sql += " 성별 	 varchar(50),";
			   sql += " 특징 	 varchar(50),";
			   sql += " 해적단    varchar(50),";
			   sql += " 역할 	 varchar(50)";
			   sql += ")";
			   if(테이블생성(sql, conn)) {
				// DML >> CRUD
				// 1단계 데이터 넣기 (insert)
				  데이터생성();
				   
			   }else{
				System.out.println("테이블 생성 실패");
			   }
			}
	
	private void 데이터생성() { // 넣고자 하는 데이터임
		DataDto data = new DataDto(); // 다른곳의 클래스를 사용하기 위해 객체 생성
		data.set번호(1);
		data.set이름("몽키 D 루피");
		data.set성별("남자");
		data.set특징("고무고무 열매");
		data.set해적단("밀짚모자");
		data.set역활("선장");

		String sql = "insert into 명단 value (";
	
			  sql += data.get번호();
			  sql += ",'" + data.get이름() + "'"; // "'" , "'" 문자기 때문에 싱글 코트 사용해야함
			  sql += ",'" + data.get성별() + "'"; // "'" , "'" 문자기 때문에 싱글 코트 사용해야함
			  sql += ",'" + data.get특징() + "'"; // "'" , "'" 문자기 때문에 싱글 코트 사용해야함
			  sql += ",'" + data.get해적단() + "'"; // "'" , "'" 문자기 때문에 싱글 코트 사용해야함
			  sql += ",'" + data.get역활() + "'"; // "'" , "'" 문자기 때문에 싱글 코트 사용해야함
			  sql += ")";
			  
			  System.out.println(sql);
				
	}
	
	
	private boolean 테이블생성(String sql, Connection conn) {
		System.out.println(sql);
		// 외부의 코드를 사용했기 때문에 try ~ catch 사용
		try {
			PreparedStatement ps = conn.prepareStatement(sql);
			ps.execute(); // 실행
			ps.close(); // ps를 종료
			return true; // << 성공
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return false; // << 실패
	}
	
	private void 데이터읽기(String sql, Connection conn) {
		
	}
	
	private void cud기능(String sql, Connection conn) { // 입력, 수정, 삭제
		
	}
	
	

}

package java0528;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;

public class DbController {
	
	// 인스턴스 변수
	private String 드라이버;
	private String 주소;
	private String 사용자;
	private String 비밀번호;
	
	public DbController(String 드라이버, String 주소, String 사용자, String 비밀번호) { // 생성자
		this.드라이버 = 드라이버;
		this.주소 = 주소;
		this.사용자 = 사용자;
		this.비밀번호 = 비밀번호;
		시작();
	}
	
	private void 시작() { // 접근제한자 private 선언했기 때문에 이 클래스에서만 사용 가능
		try {
			Class.forName(드라이버);
			try {
				Connection conn = DriverManager.getConnection(주소, 사용자, 비밀번호);
				기능제어(conn);
				
				conn.close(); // 여기서만 conn을 종료하면 된다.
			} catch (SQLException e) {
				e.printStackTrace();
			}
		} catch (ClassNotFoundException e) {
			e.printStackTrace();
		}
	}
	
	private void 기능제어(Connection conn) {
		System.out.println("테이블 생성 합니다.");
		String sql = "create OR REPLACE table 명단(";
			   sql += " 번호 	 int,";
			   sql += " 이름 	 varchar(50),";
			   sql += " 성별 	 varchar(50),";
			   sql += " 특징 	 varchar(50),";
			   sql += " 해적단    varchar(50),";
			   sql += " 역할 	 varchar(50)";
			   sql += ")";
			   if(테이블생성(sql, conn)) {
				// DML >> CRUD
				// 1단계 데이터 넣기 (insert)
				// sql = 데이터생성();
				// cud기능(sql, conn); // <<
				  cud기능(데이터생성(), conn);
			   }else{
				System.out.println("테이블 생성 실패");
			   }
			}
	
	private String 데이터생성() { // 넣고자 하는 데이터임
		DataDto data = new DataDto(); // 다른곳의 클래스를 사용하기 위해 객체 생성
		data.set번호(1);
		data.set이름("몽키 D 루피");
		data.set성별("남자");
		data.set특징("고무고무 열매");
		data.set해적단("밀짚모자");
		data.set역활("선장");

		String sql = "insert into 명단 value (";
	
			  sql += data.get번호();
			  sql += ",'" + data.get이름() + "'"; // "'" , "'" 문자기 때문에 싱글 코트 사용해야함
			  sql += ",'" + data.get성별() + "'"; // "'" , "'" 문자기 때문에 싱글 코트 사용해야함
			  sql += ",'" + data.get특징() + "'"; // "'" , "'" 문자기 때문에 싱글 코트 사용해야함
			  sql += ",'" + data.get해적단() + "'"; // "'" , "'" 문자기 때문에 싱글 코트 사용해야함
			  sql += ",'" + data.get역활() + "'"; // "'" , "'" 문자기 때문에 싱글 코트 사용해야함
			  sql += ")";
			  
			  System.out.println(sql);
			  return sql;
	}
	
	
	private boolean 테이블생성(String sql, Connection conn) {
		System.out.println(sql);
		// 외부의 코드를 사용했기 때문에 try ~ catch 사용
		try {
			PreparedStatement ps = conn.prepareStatement(sql);
			ps.execute(); // 실행
			ps.close(); // ps를 종료
			return true; // << 성공
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return false; // << 실패
	}
	
	private void 데이터읽기(String sql, Connection conn) {
		
	}
	
	private void cud기능(String sql, Connection conn) { // 입력, 수정, 삭제
		System.out.println(sql);
		// 외부의 코드를 사용했기 때문에 try ~ catch 사용
		try {
			PreparedStatement ps = conn.prepareStatement(sql);
			int result = ps.executeUpdate();
			System.out.println(result);
			ps.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}	
	}
	
	

}


